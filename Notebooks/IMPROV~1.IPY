{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "10dTxxZQxeND",
        "eMBfRlB-x17I",
        "uDLfhyjYyA-O",
        "fyNpIjRzyFZF",
        "6EMozUZUtzcU"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Upgrading Scikit Learn Library"
      ],
      "metadata": {
        "id": "OCYscas0cotf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install scikit-learn==1.4.2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nJzdbPb7csPc",
        "outputId": "5fe0bd8c-2679-41a6-acac-16306fd21b73"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikit-learn==1.4.2\n",
            "  Downloading scikit_learn-1.4.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.1/12.1 MB\u001b[0m \u001b[31m21.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.4.2) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.4.2) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.4.2) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.4.2) (3.5.0)\n",
            "Installing collected packages: scikit-learn\n",
            "  Attempting uninstall: scikit-learn\n",
            "    Found existing installation: scikit-learn 1.2.2\n",
            "    Uninstalling scikit-learn-1.2.2:\n",
            "      Successfully uninstalled scikit-learn-1.2.2\n",
            "Successfully installed scikit-learn-1.4.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Importing Dependencies & Dataset"
      ],
      "metadata": {
        "id": "fZAbn-4Pkpyw"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "5C-H6-Ibkoig"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Collection"
      ],
      "metadata": {
        "id": "RPg1bC3nl6oB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the heart disease dataset to a pandas dataFrame\n",
        "raw_mail_data = pd.read_csv('/content/mail_data.csv')"
      ],
      "metadata": {
        "id": "iebhrrRql5_e"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "U806u2RKmY3P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# first 5 rows in the dataset\n",
        "raw_mail_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "p2mF_9BvmG1E",
        "outputId": "8ee16626-81ff-47a2-f4a8-6d575c3b9ee3"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Category                                            Message\n",
              "0      ham  Go until jurong point, crazy.. Available only ...\n",
              "1      ham                      Ok lar... Joking wif u oni...\n",
              "2     spam  Free entry in 2 a wkly comp to win FA Cup fina...\n",
              "3      ham  U dun say so early hor... U c already then say...\n",
              "4      ham  Nah I don't think he goes to usf, he lives aro..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ef4ab56f-e685-44a2-97d8-0314907f6eba\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Category</th>\n",
              "      <th>Message</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ham</td>\n",
              "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ham</td>\n",
              "      <td>Ok lar... Joking wif u oni...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>spam</td>\n",
              "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ham</td>\n",
              "      <td>U dun say so early hor... U c already then say...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ham</td>\n",
              "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef4ab56f-e685-44a2-97d8-0314907f6eba')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ef4ab56f-e685-44a2-97d8-0314907f6eba button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ef4ab56f-e685-44a2-97d8-0314907f6eba');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-122e5af9-1d38-4643-915b-40853ad878af\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-122e5af9-1d38-4643-915b-40853ad878af')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-122e5af9-1d38-4643-915b-40853ad878af button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "raw_mail_data",
              "summary": "{\n  \"name\": \"raw_mail_data\",\n  \"rows\": 5572,\n  \"fields\": [\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"spam\",\n          \"ham\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Message\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5157,\n        \"samples\": [\n          \"Also sir, i sent you an email about how to log into the usc payment portal. I.ll send you another message that should explain how things are back home. Have a great weekend.\",\n          \"Are you free now?can i call now?\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# last 5 rows in the dataset\n",
        "raw_mail_data.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "-nLVbXyymdrg",
        "outputId": "19994606-81b1-4550-9208-c76828503159"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Category                                            Message\n",
              "5567     spam  This is the 2nd time we have tried 2 contact u...\n",
              "5568      ham               Will ü b going to esplanade fr home?\n",
              "5569      ham  Pity, * was in mood for that. So...any other s...\n",
              "5570      ham  The guy did some bitching but I acted like i'd...\n",
              "5571      ham                         Rofl. Its true to its name"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d5602a9-62ad-4c57-9a06-14d9124f2027\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Category</th>\n",
              "      <th>Message</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5567</th>\n",
              "      <td>spam</td>\n",
              "      <td>This is the 2nd time we have tried 2 contact u...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5568</th>\n",
              "      <td>ham</td>\n",
              "      <td>Will ü b going to esplanade fr home?</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5569</th>\n",
              "      <td>ham</td>\n",
              "      <td>Pity, * was in mood for that. So...any other s...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5570</th>\n",
              "      <td>ham</td>\n",
              "      <td>The guy did some bitching but I acted like i'd...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5571</th>\n",
              "      <td>ham</td>\n",
              "      <td>Rofl. Its true to its name</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d5602a9-62ad-4c57-9a06-14d9124f2027')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2d5602a9-62ad-4c57-9a06-14d9124f2027 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2d5602a9-62ad-4c57-9a06-14d9124f2027');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b75228d9-580b-4961-9528-9c0db7dcb480\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b75228d9-580b-4961-9528-9c0db7dcb480')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b75228d9-580b-4961-9528-9c0db7dcb480 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"raw_mail_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"ham\",\n          \"spam\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Message\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Will \\u00fc b going to esplanade fr home?\",\n          \"Rofl. Its true to its name\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# number of rows & columns\n",
        "raw_mail_data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XULw6F0-mh94",
        "outputId": "e986c9a4-e957-49c5-f5e1-0c316afb401f"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5572, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting info about the dataset\n",
        "raw_mail_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FTFifDBJmnXT",
        "outputId": "c46879a1-b870-45a6-88e8-276deea0c61d"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5572 entries, 0 to 5571\n",
            "Data columns (total 2 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   Category  5572 non-null   object\n",
            " 1   Message   5572 non-null   object\n",
            "dtypes: object(2)\n",
            "memory usage: 87.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# checking null values\n",
        "raw_mail_data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SEI5YPmcmItM",
        "outputId": "fedbfa5e-7f2a-4f5c-9ead-9f29083d557e"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Category    0\n",
              "Message     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#replace the null values with a null string\n",
        "mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')"
      ],
      "metadata": {
        "id": "iQG9CiN9mNTJ"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the stats about dataset\n",
        "mail_data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "o6_3JeN7m1iq",
        "outputId": "d42dc2ad-4ae7-4252-d851-83ecaf858735"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Category                 Message\n",
              "count      5572                    5572\n",
              "unique        2                    5157\n",
              "top         ham  Sorry, I'll call later\n",
              "freq       4825                      30"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70e8cffc-c7a5-4c8c-a4ce-910a19e97f08\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Category</th>\n",
              "      <th>Message</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5572</td>\n",
              "      <td>5572</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>2</td>\n",
              "      <td>5157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>ham</td>\n",
              "      <td>Sorry, I'll call later</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>4825</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70e8cffc-c7a5-4c8c-a4ce-910a19e97f08')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70e8cffc-c7a5-4c8c-a4ce-910a19e97f08 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70e8cffc-c7a5-4c8c-a4ce-910a19e97f08');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-01be29f2-54f2-4536-a55f-3d3875b07e96\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-01be29f2-54f2-4536-a55f-3d3875b07e96')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-01be29f2-54f2-4536-a55f-3d3875b07e96 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"mail_data\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"4825\",\n          \"5572\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Message\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5157,\n          \"30\",\n          \"5572\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# number of labels\n",
        "raw_mail_data['Category'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H3qMxHpOm7c6",
        "outputId": "7605576a-2682-4637-f1a5-19e291189893"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Category\n",
              "ham     4825\n",
              "spam     747\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#number of spam and ham\n",
        "sns.countplot(x='Category',data=mail_data,hue='Category')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "ecj-TsJ4P48w",
        "outputId": "b85f694e-f1b5-4e99-9575-675641026d7e"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Category', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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OnHihCTp6NGjevLJJ9WhQwc5nU61a9dOkpSfn+/xPFf+N6P6651iYmI8xvh9v/EQRLjh+fn5edx3OByqqqrS8ePHNWjQIHXr1k3vvfeesrOztXjxYknyuO7gWo//tn0CqDu+vr7atm2btmzZoujoaC1atEidO3dWXl7eD3r8ww8/rK+//lrLly9XVlaWsrKyJHn+vkuev/MOh+OaY/y+33iM+XJX4Juys7NVVVWluXPnysfnH/9vsG7dOi+vCsB3cTgc6t27t3r37q2kpCS1bdtWGzdulCR9/vnnunjxogIDAyVJe/fuVXBwsKKionT69Gnl5uZq+fLluu+++yRJn3zyideOAw0PQQRjdezYURUVFVq0aJEefvhh7d69W8uWLfP2sgB8i6ysLKWnp6t///5q3ry5srKyVFxcrK5du+qLL75QeXm5xowZo+nTp+v48eOaMWOGJk6cKB8fH910000KDw/X66+/rhYtWig/P1//8R//4e1DQgPCS2YwVvfu3TVv3jz98Y9/1O23367Vq1crOTnZ28sC8C2cTqd27dqlgQMHqlOnTpo+fbrmzp2rAQMGSJL69u2rW2+9VX369NGwYcP0yCOP2B+z4ePjo7Vr1yo7O1u33367Jk+erDlz5njxaNDQOCzrn+9XBADgOvXUU0+ppKRE77//vreXgusUZ4gAAIDxCCIAAGA8XjIDAADG4wwRAAAwHkEEAACMRxABAADjEUQAAMB4BBEAADAeQQQAAIxHEAFoUAoKCvTss8+qQ4cOCggIUFRUlB5++GGlp6f/oMenpKQoNDS0bhcJ4IbDl7sCaDCOHz+u3r17KzQ0VHPmzFFMTIwqKiq0detWxcfH68iRI95e4o9WUVEhPz8/by8DwPfgDBGABuOZZ56Rw+HQvn37NHjwYHXq1Em33XabEhIStHfvXknSvHnzFBMTo6CgIEVFRemZZ57RuXPnJEk7d+7U008/rdLSUjkcDjkcDvvLPcvKyvT888+rVatWCgoKUs+ePbVz506P51++fLmioqLUpEkTPfbYY5o3b95VZ5uWLl2qW265Rf7+/urcubPeeustj+0Oh0NLly7VI488oqCgIL344ovq2LGjXn75ZY95OTk5cjgc+uqrr2rvBwig5iwAaABOnz5tORwO6/e///13zps/f761fft2Ky8vz0pPT7c6d+5sTZgwwbIsyyorK7NeeeUVy+l0WqdOnbJOnTplnT171rIsyxo7dqz1s5/9zNq1a5f11VdfWXPmzLECAgKsP//5z5ZlWdYnn3xi+fj4WHPmzLFyc3OtxYsXW2FhYVZISIj93Bs2bLD8/PysxYsXW7m5udbcuXMtX19fa/v27fYcSVbz5s2tlStXWseOHbP++te/Wi+99JIVHR3tcRzPPfec1adPn9r40QGoBQQRgAYhKyvLkmRt2LDhRz1u/fr1Vnh4uH3/jTfe8IgYy7Ksv/71r5avr6/1t7/9zWO8b9++VmJiomVZljVs2DArLi7OY/vw4cM99vWzn/3MGjdunMecoUOHWgMHDrTvS7ImTZrkMedvf/ub5evra2VlZVmWZVnl5eXWzTffbKWkpPyoYwVQd3jJDECDYP3Ar1X86KOP1LdvX7Vq1UpNmzbViBEjdPr0aV24cOFbH3PgwAFVVlaqU6dOCg4Otm8ZGRk6duyYJCk3N1f33HOPx+O+ef/w4cPq3bu3x1jv3r11+PBhj7G77rrL437Lli0VFxenlStXSpI2bdqksrIyDR069AcdM4C6x0XVABqEW2+9VQ6H4zsvnD5+/LgGDRqkCRMm6KWXXlJYWJg++eQTjRkzRuXl5WrSpMk1H3fu3Dn5+voqOztbvr6+HtuCg4Nr9TgkKSgo6KqxsWPHasSIEZo/f77eeOMNDRs27FvXC6D+cYYIQIMQFham2NhYLV68WOfPn79qe0lJibKzs1VVVaW5c+eqV69e6tSpk06ePOkxz9/fX5WVlR5j//Iv/6LKykoVFRWpY8eOHrfIyEhJUufOnbV//36Px33zfteuXbV7926Psd27dys6Ovp7j2/gwIEKCgrS0qVLlZaWptGjR3/vYwDUH4IIQIOxePFiVVZW6p577tF7772no0eP6vDhw1q4cKFcLpc6duyoiooKLVq0SH/5y1/01ltvadmyZR77aNeunc6dO6f09HT9/e9/14ULF9SpUycNHz5cI0eO1IYNG5SXl6d9+/YpOTlZqampkqRnn31WH3zwgebNm6ejR4/qtdde05YtW+RwOOx9T5kyRSkpKVq6dKmOHj2qefPmacOGDXr++ee/99h8fX311FNPKTExUbfeeqtcLlft/vAA/DTevogJAK508uRJKz4+3mrbtq3l7+9vtWrVynrkkUesHTt2WJZlWfPmzbNatGhhBQYGWrGxsdabb75pSbLOnDlj72P8+PFWeHi4JcmaMWOGZVn/uJA5KSnJateuneXn52e1aNHCeuyxx6wvvvjCftzrr79utWrVygoMDLQeffRR68UXX7QiIyM91rdkyRKrQ4cOlp+fn9WpUyfrzTff9Nguydq4ceM1j+3YsWOWJGv27Nk/+ecEoHY5LOsHXskIAIYZN26cjhw5oo8//rhW9vfxxx+rb9++OnHihCIiImplnwBqBxdVA8A/vfzyy3rooYcUFBSkLVu2aNWqVVqyZMlP3m9ZWZmKi4v1wgsvaOjQocQQ0ABxDREA/NO+ffv00EMPKSYmRsuWLdPChQs1duzYn7zft99+W23btlVJSYlmz55dCysFUNt4yQwAABiPM0QAAMB4BBEAADAeQQQAAIxHEAEAAOMRRAAAwHgEEQAAMB5BBAAAjEcQAQAA4/0/R7umE3SVK9EAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Preprocessing & Splitting"
      ],
      "metadata": {
        "id": "ObFySXsRnPxb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Label Encoding"
      ],
      "metadata": {
        "id": "r5B7DMq-m7it"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#labels spam--> 1 ; ham--> 0\n",
        "mail_data.loc[mail_data['Category']=='ham','Category',] = 0\n",
        "mail_data.loc[mail_data['Category']=='spam','Category',] = 1"
      ],
      "metadata": {
        "id": "-MYeX3H0muxI"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Splitting the Data"
      ],
      "metadata": {
        "id": "Tu83ss-Dnd5A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# seperating the data and labels\n",
        "X = mail_data['Message']\n",
        "y = mail_data['Category']"
      ],
      "metadata": {
        "id": "Vl_UIEADngXQ"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X)\n",
        "print(y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "81yrvHQInz1l",
        "outputId": "62ac5444-a06c-4479-a70d-225ff710d106"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       Go until jurong point, crazy.. Available only ...\n",
            "1                           Ok lar... Joking wif u oni...\n",
            "2       Free entry in 2 a wkly comp to win FA Cup fina...\n",
            "3       U dun say so early hor... U c already then say...\n",
            "4       Nah I don't think he goes to usf, he lives aro...\n",
            "                              ...                        \n",
            "5567    This is the 2nd time we have tried 2 contact u...\n",
            "5568                 Will ü b going to esplanade fr home?\n",
            "5569    Pity, * was in mood for that. So...any other s...\n",
            "5570    The guy did some bitching but I acted like i'd...\n",
            "5571                           Rofl. Its true to its name\n",
            "Name: Message, Length: 5572, dtype: object\n",
            "0       0\n",
            "1       0\n",
            "2       1\n",
            "3       0\n",
            "4       0\n",
            "       ..\n",
            "5567    1\n",
            "5568    0\n",
            "5569    0\n",
            "5570    0\n",
            "5571    0\n",
            "Name: Category, Length: 5572, dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#importing the train_test_split to split the data\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "F7nffKrUn1jB"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# spliting the data in training & testing data\n",
        "X_train , X_test , y_train , y_test = train_test_split(X,y,test_size = 0.2,random_state=42, stratify=y)"
      ],
      "metadata": {
        "id": "AStNEBJWnqPF"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X.shape, X_train.shape , X_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WwUIhqQgoOmU",
        "outputId": "c4c0daa4-55b7-4932-ee77-5aac01984ea7"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(5572,) (4457,) (1115,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Extraction"
      ],
      "metadata": {
        "id": "TwPp8NRnoZ5t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#importing the TfidfVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer"
      ],
      "metadata": {
        "id": "vE2u14gqn-GD"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#transform the text data to feature vectors that can be input to model\n",
        "feature_extraction = TfidfVectorizer(min_df=1,stop_words='english',lowercase=True)"
      ],
      "metadata": {
        "id": "i03MMMyQoTT6"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#fitting and transforming the X_train data\n",
        "X_train_features = feature_extraction.fit_transform(X_train)"
      ],
      "metadata": {
        "id": "qHmX00ZQnzvh"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train_features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EM3NHqk8oPOA",
        "outputId": "c4683711-129f-4d07-8a24-12cd5a51153f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  (0, 1803)\t0.7464182419165099\n",
            "  (0, 3187)\t0.6654771281826798\n",
            "  (1, 400)\t0.24345620884965122\n",
            "  (1, 6654)\t0.2645075551907187\n",
            "  (1, 3517)\t0.1916818620435454\n",
            "  (1, 3633)\t0.2645075551907187\n",
            "  (1, 6537)\t0.2645075551907187\n",
            "  (1, 4497)\t0.2645075551907187\n",
            "  (1, 2354)\t0.2645075551907187\n",
            "  (1, 2356)\t0.2645075551907187\n",
            "  (1, 387)\t0.2645075551907187\n",
            "  (1, 5374)\t0.2645075551907187\n",
            "  (1, 3744)\t0.11453521007962274\n",
            "  (1, 4806)\t0.2645075551907187\n",
            "  (1, 6895)\t0.2645075551907187\n",
            "  (1, 2355)\t0.2645075551907187\n",
            "  (1, 6697)\t0.18660831706988856\n",
            "  (1, 3509)\t0.2645075551907187\n",
            "  (1, 1860)\t0.1283557507585115\n",
            "  (2, 1070)\t0.39391011803589404\n",
            "  (2, 6441)\t0.48320384319846865\n",
            "  (2, 5952)\t0.4607081074843352\n",
            "  (2, 3832)\t0.3886221843200966\n",
            "  (2, 6172)\t0.4447471289878994\n",
            "  (2, 4726)\t0.22420904004227302\n",
            "  :\t:\n",
            "  (4455, 6209)\t0.24113417360632425\n",
            "  (4455, 3613)\t0.24471255171290388\n",
            "  (4455, 2555)\t0.45034271195156134\n",
            "  (4455, 1007)\t0.20616502451335794\n",
            "  (4455, 1677)\t0.19669903119338905\n",
            "  (4455, 7119)\t0.21933477485089736\n",
            "  (4455, 7181)\t0.18085114829016455\n",
            "  (4455, 2222)\t0.21593562238191955\n",
            "  (4455, 5342)\t0.20868196687475565\n",
            "  (4455, 6782)\t0.3044781781727817\n",
            "  (4455, 319)\t0.19321256973157325\n",
            "  (4455, 2899)\t0.14315716914460408\n",
            "  (4456, 3441)\t0.396919945464088\n",
            "  (4456, 3128)\t0.396919945464088\n",
            "  (4456, 2743)\t0.3235710658541696\n",
            "  (4456, 3926)\t0.2560480926085593\n",
            "  (4456, 3500)\t0.26779845349668496\n",
            "  (4456, 5676)\t0.27830438973201616\n",
            "  (4456, 6558)\t0.22002069789822185\n",
            "  (4456, 2142)\t0.22550617899105901\n",
            "  (4456, 5855)\t0.2766469626679603\n",
            "  (4456, 4721)\t0.2276767902363755\n",
            "  (4456, 4598)\t0.22394348116774498\n",
            "  (4456, 4427)\t0.24115971319962848\n",
            "  (4456, 3744)\t0.17187149647102748\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(X_train_features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "id": "n7LfxpIYoRmN",
        "outputId": "7776cf9b-a9d5-4099-df47-b51f68f4d965"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "scipy.sparse._csr.csr_matrix"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>scipy.sparse._csr.csr_matrix</b><br/>def __init__(arg1, shape=None, dtype=None, copy=False)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/scipy/sparse/_csr.py</a>Compressed Sparse Row matrix\n",
              "\n",
              "This can be instantiated in several ways:\n",
              "    csr_array(D)\n",
              "        with a dense matrix or rank-2 ndarray D\n",
              "\n",
              "    csr_array(S)\n",
              "        with another sparse matrix S (equivalent to S.tocsr())\n",
              "\n",
              "    csr_array((M, N), [dtype])\n",
              "        to construct an empty matrix with shape (M, N)\n",
              "        dtype is optional, defaulting to dtype=&#x27;d&#x27;.\n",
              "\n",
              "    csr_array((data, (row_ind, col_ind)), [shape=(M, N)])\n",
              "        where ``data``, ``row_ind`` and ``col_ind`` satisfy the\n",
              "        relationship ``a[row_ind[k], col_ind[k]] = data[k]``.\n",
              "\n",
              "    csr_array((data, indices, indptr), [shape=(M, N)])\n",
              "        is the standard CSR representation where the column indices for\n",
              "        row i are stored in ``indices[indptr[i]:indptr[i+1]]`` and their\n",
              "        corresponding values are stored in ``data[indptr[i]:indptr[i+1]]``.\n",
              "        If the shape parameter is not supplied, the matrix dimensions\n",
              "        are inferred from the index arrays.\n",
              "\n",
              "Attributes\n",
              "----------\n",
              "dtype : dtype\n",
              "    Data type of the matrix\n",
              "shape : 2-tuple\n",
              "    Shape of the matrix\n",
              "ndim : int\n",
              "    Number of dimensions (this is always 2)\n",
              "nnz\n",
              "    Number of stored values, including explicit zeros\n",
              "data\n",
              "    CSR format data array of the matrix\n",
              "indices\n",
              "    CSR format index array of the matrix\n",
              "indptr\n",
              "    CSR format index pointer array of the matrix\n",
              "has_sorted_indices\n",
              "    Whether indices are sorted\n",
              "\n",
              "Notes\n",
              "-----\n",
              "\n",
              "Sparse matrices can be used in arithmetic operations: they support\n",
              "addition, subtraction, multiplication, division, and matrix power.\n",
              "\n",
              "Advantages of the CSR format\n",
              "  - efficient arithmetic operations CSR + CSR, CSR * CSR, etc.\n",
              "  - efficient row slicing\n",
              "  - fast matrix vector products\n",
              "\n",
              "Disadvantages of the CSR format\n",
              "  - slow column slicing operations (consider CSC)\n",
              "  - changes to the sparsity structure are expensive (consider LIL or DOK)\n",
              "\n",
              "Canonical Format\n",
              "    - Within each row, indices are sorted by column.\n",
              "    - There are no duplicate entries.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "\n",
              "&gt;&gt;&gt; import numpy as np\n",
              "&gt;&gt;&gt; from scipy.sparse import csr_array\n",
              "&gt;&gt;&gt; csr_array((3, 4), dtype=np.int8).toarray()\n",
              "array([[0, 0, 0, 0],\n",
              "       [0, 0, 0, 0],\n",
              "       [0, 0, 0, 0]], dtype=int8)\n",
              "\n",
              "&gt;&gt;&gt; row = np.array([0, 0, 1, 2, 2, 2])\n",
              "&gt;&gt;&gt; col = np.array([0, 2, 2, 0, 1, 2])\n",
              "&gt;&gt;&gt; data = np.array([1, 2, 3, 4, 5, 6])\n",
              "&gt;&gt;&gt; csr_array((data, (row, col)), shape=(3, 3)).toarray()\n",
              "array([[1, 0, 2],\n",
              "       [0, 0, 3],\n",
              "       [4, 5, 6]])\n",
              "\n",
              "&gt;&gt;&gt; indptr = np.array([0, 2, 3, 6])\n",
              "&gt;&gt;&gt; indices = np.array([0, 2, 2, 0, 1, 2])\n",
              "&gt;&gt;&gt; data = np.array([1, 2, 3, 4, 5, 6])\n",
              "&gt;&gt;&gt; csr_array((data, indices, indptr), shape=(3, 3)).toarray()\n",
              "array([[1, 0, 2],\n",
              "       [0, 0, 3],\n",
              "       [4, 5, 6]])\n",
              "\n",
              "Duplicate entries are summed together:\n",
              "\n",
              "&gt;&gt;&gt; row = np.array([0, 1, 2, 0])\n",
              "&gt;&gt;&gt; col = np.array([0, 1, 1, 0])\n",
              "&gt;&gt;&gt; data = np.array([1, 2, 4, 8])\n",
              "&gt;&gt;&gt; csr_array((data, (row, col)), shape=(3, 3)).toarray()\n",
              "array([[9, 0, 0],\n",
              "       [0, 2, 0],\n",
              "       [0, 4, 0]])\n",
              "\n",
              "As an example of how to construct a CSR matrix incrementally,\n",
              "the following snippet builds a term-document matrix from texts:\n",
              "\n",
              "&gt;&gt;&gt; docs = [[&quot;hello&quot;, &quot;world&quot;, &quot;hello&quot;], [&quot;goodbye&quot;, &quot;cruel&quot;, &quot;world&quot;]]\n",
              "&gt;&gt;&gt; indptr = [0]\n",
              "&gt;&gt;&gt; indices = []\n",
              "&gt;&gt;&gt; data = []\n",
              "&gt;&gt;&gt; vocabulary = {}\n",
              "&gt;&gt;&gt; for d in docs:\n",
              "...     for term in d:\n",
              "...         index = vocabulary.setdefault(term, len(vocabulary))\n",
              "...         indices.append(index)\n",
              "...         data.append(1)\n",
              "...     indptr.append(len(indices))\n",
              "...\n",
              "&gt;&gt;&gt; csr_array((data, indices, indptr), dtype=int).toarray()\n",
              "array([[2, 1, 0, 0],\n",
              "       [0, 1, 1, 1]])</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 370);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#transformimng the test data\n",
        "X_test_features = feature_extraction.transform(X_test)"
      ],
      "metadata": {
        "id": "5P3iUEEIoNam"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "type(y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "0rrToOdNoZ_Q",
        "outputId": "2d623e77-e0d7-44ee-c71b-e213baa6d5a7"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.series.Series"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.series.Series</b><br/>def __init__(data=None, index=None, dtype: Dtype | None=None, name=None, copy: bool | None=None, fastpath: bool=False) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/series.py</a>One-dimensional ndarray with axis labels (including time series).\n",
              "\n",
              "Labels need not be unique but must be a hashable type. The object\n",
              "supports both integer- and label-based indexing and provides a host of\n",
              "methods for performing operations involving the index. Statistical\n",
              "methods from ndarray have been overridden to automatically exclude\n",
              "missing data (currently represented as NaN).\n",
              "\n",
              "Operations between Series (+, -, /, \\*, \\*\\*) align values based on their\n",
              "associated index values-- they need not be the same length. The result\n",
              "index will be the sorted union of the two indexes.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "data : array-like, Iterable, dict, or scalar value\n",
              "    Contains data stored in Series. If data is a dict, argument order is\n",
              "    maintained.\n",
              "index : array-like or Index (1d)\n",
              "    Values must be hashable and have the same length as `data`.\n",
              "    Non-unique index values are allowed. Will default to\n",
              "    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n",
              "    and index is None, then the keys in the data are used as the index. If the\n",
              "    index is not None, the resulting Series is reindexed with the index values.\n",
              "dtype : str, numpy.dtype, or ExtensionDtype, optional\n",
              "    Data type for the output Series. If not specified, this will be\n",
              "    inferred from `data`.\n",
              "    See the :ref:`user guide &lt;basics.dtypes&gt;` for more usages.\n",
              "name : Hashable, default None\n",
              "    The name to give to the Series.\n",
              "copy : bool, default False\n",
              "    Copy input data. Only affects Series or 1d ndarray input. See examples.\n",
              "\n",
              "Notes\n",
              "-----\n",
              "Please reference the :ref:`User Guide &lt;basics.series&gt;` for more information.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "Constructing Series from a dictionary with an Index specified\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3}\n",
              "&gt;&gt;&gt; ser = pd.Series(data=d, index=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n",
              "&gt;&gt;&gt; ser\n",
              "a   1\n",
              "b   2\n",
              "c   3\n",
              "dtype: int64\n",
              "\n",
              "The keys of the dictionary match with the Index values, hence the Index\n",
              "values have no effect.\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3}\n",
              "&gt;&gt;&gt; ser = pd.Series(data=d, index=[&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;])\n",
              "&gt;&gt;&gt; ser\n",
              "x   NaN\n",
              "y   NaN\n",
              "z   NaN\n",
              "dtype: float64\n",
              "\n",
              "Note that the Index is first build with the keys from the dictionary.\n",
              "After this the Series is reindexed with the given Index values, hence we\n",
              "get all NaN as a result.\n",
              "\n",
              "Constructing Series from a list with `copy=False`.\n",
              "\n",
              "&gt;&gt;&gt; r = [1, 2]\n",
              "&gt;&gt;&gt; ser = pd.Series(r, copy=False)\n",
              "&gt;&gt;&gt; ser.iloc[0] = 999\n",
              "&gt;&gt;&gt; r\n",
              "[1, 2]\n",
              "&gt;&gt;&gt; ser\n",
              "0    999\n",
              "1      2\n",
              "dtype: int64\n",
              "\n",
              "Due to input data type the Series has a `copy` of\n",
              "the original data even though `copy=False`, so\n",
              "the data is unchanged.\n",
              "\n",
              "Constructing Series from a 1d ndarray with `copy=False`.\n",
              "\n",
              "&gt;&gt;&gt; r = np.array([1, 2])\n",
              "&gt;&gt;&gt; ser = pd.Series(r, copy=False)\n",
              "&gt;&gt;&gt; ser.iloc[0] = 999\n",
              "&gt;&gt;&gt; r\n",
              "array([999,   2])\n",
              "&gt;&gt;&gt; ser\n",
              "0    999\n",
              "1      2\n",
              "dtype: int64\n",
              "\n",
              "Due to input data type the Series has a `view` on\n",
              "the original data, so\n",
              "the data is changed as well.</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 244);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#convert Y_train and Y_test values as int\n",
        "y_train = y_train.astype('int')\n",
        "y_test = y_test.astype('int')"
      ],
      "metadata": {
        "id": "ItvkD24in1Oq"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Selection"
      ],
      "metadata": {
        "id": "DYS_7Ogn8yYh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Comparing the models with default hyperparameter values using Cross Validation"
      ],
      "metadata": {
        "id": "QjczlN4G9DdO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the standard classification models from sklearn library\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from xgboost import XGBClassifier"
      ],
      "metadata": {
        "id": "jlHcIhnY9H04"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# all models in a dictionary\n",
        "models = {\n",
        "    'Logistic Regression': LogisticRegression(),\n",
        "    'KNN': KNeighborsClassifier(),\n",
        "    'Random Forest': RandomForestClassifier(),\n",
        "    'SVM': SVC(kernel='linear'),\n",
        "    'XGBoost': XGBClassifier()\n",
        "}"
      ],
      "metadata": {
        "id": "VjvVqFhe6xBh"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# importing cross validation score function to calculate the cross validation score\n",
        "from sklearn.model_selection import cross_val_score"
      ],
      "metadata": {
        "id": "Ouc6Xr_i9eS7"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# defining a function who can give you cross validation scores on given data with given set of model\n",
        "def compare_models_cross_validation(models,X,y):\n",
        "  for name, model in models.items():\n",
        "    cv_score = cross_val_score(model, X, y, cv=5)\n",
        "    mean_accuracy = cv_score.mean() * 100\n",
        "    print(f\"Model: {name}\")\n",
        "    print('Cross Validation accuracies for the',model,'=', cv_score)\n",
        "    print('Acccuracy score of the ',model,'=',mean_accuracy,'%')\n",
        "    print(\"=\"*50)"
      ],
      "metadata": {
        "id": "VXV1qK8X6w7w"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# calling the compare function for the models we choose\n",
        "compare_models_cross_validation(models,X_train_features,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4hdQn7bg6w44",
        "outputId": "37d7a2ed-6fb6-4579-f495-dedebe9bb577"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: Logistic Regression\n",
            "Cross Validation accuracies for the LogisticRegression() = [0.94506726 0.93946188 0.95398429 0.94276094 0.94163861]\n",
            "Acccuracy score of the  LogisticRegression() = 94.45825972731802 %\n",
            "==================================================\n",
            "Model: KNN\n",
            "Cross Validation accuracies for the KNeighborsClassifier() = [0.89798206 0.89349776 0.89450056 0.88552189 0.89337823]\n",
            "Acccuracy score of the  KNeighborsClassifier() = 89.29760988056952 %\n",
            "==================================================\n",
            "Model: Random Forest\n",
            "Cross Validation accuracies for the RandomForestClassifier() = [0.97533632 0.97757848 0.97418631 0.97530864 0.97755331]\n",
            "Acccuracy score of the  RandomForestClassifier() = 97.59926117175743 %\n",
            "==================================================\n",
            "Model: SVM\n",
            "Cross Validation accuracies for the SVC(kernel='linear') = [0.97757848 0.9809417  0.98204265 0.97530864 0.97530864]\n",
            "Acccuracy score of the  SVC(kernel='linear') = 97.8236022406426 %\n",
            "==================================================\n",
            "Model: XGBoost\n",
            "Cross Validation accuracies for the XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
            "              colsample_bylevel=None, colsample_bynode=None,\n",
            "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
            "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
            "              gamma=None, grow_policy=None, importance_type=None,\n",
            "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
            "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
            "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
            "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
            "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
            "              num_parallel_tree=None, random_state=None, ...) = [0.97421525 0.97421525 0.97867565 0.97418631 0.97306397]\n",
            "Acccuracy score of the  XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
            "              colsample_bylevel=None, colsample_bynode=None,\n",
            "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
            "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
            "              gamma=None, grow_policy=None, importance_type=None,\n",
            "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
            "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
            "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
            "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
            "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
            "              num_parallel_tree=None, random_state=None, ...) = 97.48712838398937 %\n",
            "==================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Top 3:\n",
        "\n",
        "SVC(kernel='linear') = 97.8236022406426 %\n",
        "\n",
        "XGBClassifier() = 97.48712838398937 %\n",
        "\n",
        "RandomForestClassifier() = 97.59926117175743 %"
      ],
      "metadata": {
        "id": "RmRlgK2S-BM4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Support Vector Classifer"
      ],
      "metadata": {
        "id": "10dTxxZQxeND"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Support Vector Classifer as the highest accuracy based on cross validation score according to its default hyperparameters\n",
        "\n",
        "SVC(kernel='linear') = 97.8236022406426 %"
      ],
      "metadata": {
        "id": "h7MBkz_BxgkX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading svc\n",
        "svc = SVC(kernel='linear')"
      ],
      "metadata": {
        "id": "GJy8w79-xa2N"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the default model with its best features\n",
        "svc.fit(X_train_features,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "iNrfZQjIxanN",
        "outputId": "4c7cdfd0-6123-4dac-e34d-b4d8e3ca4c64"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(kernel='linear')"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;SVC<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the labels on test data\n",
        "y_predict_svc = svc.predict(X_test_features)"
      ],
      "metadata": {
        "id": "wENfIJ76xtgR"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the classification report for evaluation\n",
        "from sklearn.metrics import classification_report"
      ],
      "metadata": {
        "id": "05drDTghxtaW"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, y_predict_svc))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gDTbtvtfxtXp",
        "outputId": "ae1307fb-f2ad-4e7f-cc98-82e8515a35d2"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      1.00      0.99       966\n",
            "           1       0.99      0.89      0.94       149\n",
            "\n",
            "    accuracy                           0.98      1115\n",
            "   macro avg       0.99      0.94      0.96      1115\n",
            "weighted avg       0.98      0.98      0.98      1115\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the confusion matrix\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay"
      ],
      "metadata": {
        "id": "H7bM8wHPxtU_"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test, y_predict_svc))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G-5ATMrJxtSU",
        "outputId": "20494d84-8ec0-4c43-de6a-421c105cfd86"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[965   1]\n",
            " [ 17 132]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hyperparameter Tuning : Support Vector Classifer"
      ],
      "metadata": {
        "id": "eMBfRlB-x17I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# importing gridsearchcv to check the best hyperparameters\n",
        "from sklearn.model_selection import GridSearchCV"
      ],
      "metadata": {
        "id": "c14QpkMmx0ck"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#setting the hyperparameters\n",
        "params_svc = {\n",
        "    'C': [0.1, 1, 10, 100],\n",
        "    'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],\n",
        "    'gamma': [1, 0.1, 0.01, 0.001]\n",
        "    }"
      ],
      "metadata": {
        "id": "Lu-05Tw7x5W9"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the data and model to grid search cv\n",
        "grid_svc = GridSearchCV(estimator=svc, param_grid=params_svc, cv=5, n_jobs=-1)\n",
        "grid_svc.fit(X_train_features,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        },
        "id": "fqssftaNx0aB",
        "outputId": "0128e3a7-f0ae-42f7-92db-17a0e93cbf23"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=SVC(kernel='linear'), n_jobs=-1,\n",
              "             param_grid={'C': [0.1, 1, 10, 100], 'gamma': [1, 0.1, 0.01, 0.001],\n",
              "                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']})"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=SVC(kernel=&#x27;linear&#x27;), n_jobs=-1,\n",
              "             param_grid={&#x27;C&#x27;: [0.1, 1, 10, 100], &#x27;gamma&#x27;: [1, 0.1, 0.01, 0.001],\n",
              "                         &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;, &#x27;sigmoid&#x27;]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=SVC(kernel=&#x27;linear&#x27;), n_jobs=-1,\n",
              "             param_grid={&#x27;C&#x27;: [0.1, 1, 10, 100], &#x27;gamma&#x27;: [1, 0.1, 0.01, 0.001],\n",
              "                         &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;, &#x27;sigmoid&#x27;]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: SVC</label><div class=\"sk-toggleable__content fitted\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SVC<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the best hyperparameters\n",
        "print(grid_svc.best_estimator_, grid_svc.best_params_, grid_svc.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EJOw-h80x0W1",
        "outputId": "55dd5d03-47f9-41fc-fbd5-5d60e164e5a3"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVC(C=100, gamma=0.01) {'C': 100, 'gamma': 0.01, 'kernel': 'rbf'} 0.9824988801819892\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# testing grid_svc model on test data\n",
        "y_predict_grid_svc = grid_svc.predict(X_test_features)\n",
        "print(classification_report(y_test, y_predict_grid_svc))\n",
        "print(confusion_matrix(y_test, y_predict_grid_svc))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DPdzakNcx0UB",
        "outputId": "4cff0687-a666-4190-c30b-b2d0d0e56fcb"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      1.00      0.99       966\n",
            "           1       0.97      0.89      0.93       149\n",
            "\n",
            "    accuracy                           0.98      1115\n",
            "   macro avg       0.98      0.94      0.96      1115\n",
            "weighted avg       0.98      0.98      0.98      1115\n",
            "\n",
            "[[962   4]\n",
            " [ 16 133]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Best Parameters : {'C': 100, 'gamma': 0.01, 'kernel': 'rbf'}"
      ],
      "metadata": {
        "id": "Gtrxto4Wx_R9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Final Model : Support Vector Classifer"
      ],
      "metadata": {
        "id": "uDLfhyjYyA-O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the model with best hyper parameter\n",
        "model1 = SVC(C=100, gamma=0.01)"
      ],
      "metadata": {
        "id": "5w2VayVVx0RK"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the training data with best features of svc\n",
        "model1.fit(X_train_features,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "FgbpIIr6x0Og",
        "outputId": "b97e4d25-2d53-4a30-abe5-f9ea2700eae2"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=100, gamma=0.01)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=100, gamma=0.01)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;SVC<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=100, gamma=0.01)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Evaluation : Support Vector Classifer"
      ],
      "metadata": {
        "id": "fyNpIjRzyFZF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the test data\n",
        "y_predict_model1 = model1.predict(X_test_features)"
      ],
      "metadata": {
        "id": "rw1712a8x0Lo"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting classification report\n",
        "print(classification_report(y_test, y_predict_model1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hQhXjLdAyGmA",
        "outputId": "e25e6bff-d336-4ae2-dffa-2c225b343850"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      1.00      0.99       966\n",
            "           1       0.97      0.89      0.93       149\n",
            "\n",
            "    accuracy                           0.98      1115\n",
            "   macro avg       0.98      0.94      0.96      1115\n",
            "weighted avg       0.98      0.98      0.98      1115\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the accuracy score for evaluation\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "metadata": {
        "id": "NWkWuE4zyGi3"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#model1 accuracy on training data\n",
        "y_train_predict_model1 = model1.predict(X_train_features)\n",
        "train_data_accuracy_model1 = accuracy_score(y_train_predict_model1, y_train)\n",
        "print('Accuracy on training data: ',train_data_accuracy_model1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TQ0r4f0lyGf2",
        "outputId": "a61e6c41-408c-47b6-c534-25d80d17c3ee"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on training data:  0.9997756338344178\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# classification report on training data of model1\n",
        "print(classification_report(y_train, y_train_predict_model1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7HjNRZwhyGcv",
        "outputId": "adbd9a8f-1eeb-48a9-fcde-66472cfae91e"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00      3859\n",
            "           1       1.00      1.00      1.00       598\n",
            "\n",
            "    accuracy                           1.00      4457\n",
            "   macro avg       1.00      1.00      1.00      4457\n",
            "weighted avg       1.00      1.00      1.00      4457\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#setting the figure parameters\n",
        "plt.rcParams['figure.figsize'] = (8, 8)\n",
        "plt.rcParams['figure.dpi'] = 100"
      ],
      "metadata": {
        "id": "bUlNF2-8yGZv"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of training data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_train, y_train_predict_model1)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['Ham', 'Spam'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 661
        },
        "id": "Tro9YE0nyGWv",
        "outputId": "f3c925cc-bc4e-4445-be04-135b322ced94"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#model1 accuracy on test data\n",
        "y_test_predict_model1 = model1.predict(X_test_features)\n",
        "test_data_accuracy_model1 = accuracy_score(y_test_predict_model1, y_test)\n",
        "print('Accuracy on test data: ',test_data_accuracy_model1 )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1-9_BP3QyGTm",
        "outputId": "83c0a988-bb6f-431a-a62b-5c7d4ad2cf38"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on test data:  0.9820627802690582\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#classification report on test data of model1\n",
        "print(classification_report(y_test, y_test_predict_model1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QBDMStwyyGQn",
        "outputId": "a6c86ee5-7989-43ed-a61f-6a7fc17de12c"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      1.00      0.99       966\n",
            "           1       0.97      0.89      0.93       149\n",
            "\n",
            "    accuracy                           0.98      1115\n",
            "   macro avg       0.98      0.94      0.96      1115\n",
            "weighted avg       0.98      0.98      0.98      1115\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of training data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_test, y_test_predict_model1)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['Ham', 'Spam'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "id": "QSwdDi4tyT5K",
        "outputId": "ec93c5da-8b92-4725-daa2-10becec6ca17"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vGht_6rNrQ6B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cTg48IW0rQ3I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. XG Boost Classifer"
      ],
      "metadata": {
        "id": "nkDwFntNsfn_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "XG Boost Classifer as the 2nd highest accuracy based on cross validation score according to its default hyperparameters\n",
        "\n",
        "XGBClassifier() = 97.48712838398937 %"
      ],
      "metadata": {
        "id": "31DgleqcsfoA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the XG Boost Classifer\n",
        "xgb = XGBClassifier()"
      ],
      "metadata": {
        "id": "2iYKsPBRsfoA"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the default model with its best features\n",
        "xgb.fit(X_train_features,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "outputId": "f5f2a848-7578-4e15-a87d-45b9ca0c1f46",
        "id": "QCMHWKCFsfoB"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-4 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-4 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-4 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-4 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-4 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;XGBClassifier<span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the labels on test data\n",
        "y_predict_xgb = xgb.predict(X_test_features)"
      ],
      "metadata": {
        "id": "ojnnncWisfoB"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the classification report for evaluation\n",
        "from sklearn.metrics import classification_report"
      ],
      "metadata": {
        "id": "Vb4IxrgosfoC"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, y_predict_xgb))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fdf86317-4b3b-40ba-9d91-9591afc236ae",
        "id": "W99t4M7_sfoC"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.99      0.98       966\n",
            "           1       0.93      0.77      0.84       149\n",
            "\n",
            "    accuracy                           0.96      1115\n",
            "   macro avg       0.95      0.88      0.91      1115\n",
            "weighted avg       0.96      0.96      0.96      1115\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the confusion matrix\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay"
      ],
      "metadata": {
        "id": "hkmzSPe6sfoC"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test, y_predict_xgb))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "30e05492-aaa7-477a-ded0-5db0600bf03f",
        "id": "x55iesvzsfoD"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[958   8]\n",
            " [ 35 114]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7CGwqRiZrQ0N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hyperparameter Tuning : XG Boost Classifer"
      ],
      "metadata": {
        "id": "nADpDthAs_e6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#setting the hyperparameters\n",
        "params_xgb = {\n",
        "    'n_estimators': [300, 350, 400],\n",
        "         'learning_rate': [0.01, 0.1, 1],\n",
        "         'max_depth': [1,2,3,4,5],\n",
        "    }"
      ],
      "metadata": {
        "id": "1OnfjD9-s_e7"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the data and model to grid search cv\n",
        "grid_xgb = GridSearchCV(estimator=xgb, param_grid=params_xgb, cv=5, n_jobs=-1)\n",
        "grid_xgb.fit(X_train_features,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        },
        "outputId": "3dc6fa60-d190-4141-e927-acdb5452b268",
        "id": "1iH19r_Es_e7"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5,\n",
              "             estimator=XGBClassifier(base_score=None, booster=None,\n",
              "                                     callbacks=None, colsample_bylevel=None,\n",
              "                                     colsample_bynode=None,\n",
              "                                     colsample_bytree=None, device=None,\n",
              "                                     early_stopping_rounds=None,\n",
              "                                     enable_categorical=False, eval_metric=None,\n",
              "                                     feature_types=None, gamma=None,\n",
              "                                     grow_policy=None, importance_type=None,\n",
              "                                     interaction_constraints=None,\n",
              "                                     learning_rate=None,...\n",
              "                                     max_cat_threshold=None,\n",
              "                                     max_cat_to_onehot=None,\n",
              "                                     max_delta_step=None, max_depth=None,\n",
              "                                     max_leaves=None, min_child_weight=None,\n",
              "                                     missing=nan, monotone_constraints=None,\n",
              "                                     multi_strategy=None, n_estimators=None,\n",
              "                                     n_jobs=None, num_parallel_tree=None,\n",
              "                                     random_state=None, ...),\n",
              "             n_jobs=-1,\n",
              "             param_grid={'learning_rate': [0.01, 0.1, 1],\n",
              "                         'max_depth': [1, 2, 3, 4, 5],\n",
              "                         'n_estimators': [300, 350, 400]})"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-5 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-5 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-5 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-5 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-5 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=XGBClassifier(base_score=None, booster=None,\n",
              "                                     callbacks=None, colsample_bylevel=None,\n",
              "                                     colsample_bynode=None,\n",
              "                                     colsample_bytree=None, device=None,\n",
              "                                     early_stopping_rounds=None,\n",
              "                                     enable_categorical=False, eval_metric=None,\n",
              "                                     feature_types=None, gamma=None,\n",
              "                                     grow_policy=None, importance_type=None,\n",
              "                                     interaction_constraints=None,\n",
              "                                     learning_rate=None,...\n",
              "                                     max_cat_threshold=None,\n",
              "                                     max_cat_to_onehot=None,\n",
              "                                     max_delta_step=None, max_depth=None,\n",
              "                                     max_leaves=None, min_child_weight=None,\n",
              "                                     missing=nan, monotone_constraints=None,\n",
              "                                     multi_strategy=None, n_estimators=None,\n",
              "                                     n_jobs=None, num_parallel_tree=None,\n",
              "                                     random_state=None, ...),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;learning_rate&#x27;: [0.01, 0.1, 1],\n",
              "                         &#x27;max_depth&#x27;: [1, 2, 3, 4, 5],\n",
              "                         &#x27;n_estimators&#x27;: [300, 350, 400]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=XGBClassifier(base_score=None, booster=None,\n",
              "                                     callbacks=None, colsample_bylevel=None,\n",
              "                                     colsample_bynode=None,\n",
              "                                     colsample_bytree=None, device=None,\n",
              "                                     early_stopping_rounds=None,\n",
              "                                     enable_categorical=False, eval_metric=None,\n",
              "                                     feature_types=None, gamma=None,\n",
              "                                     grow_policy=None, importance_type=None,\n",
              "                                     interaction_constraints=None,\n",
              "                                     learning_rate=None,...\n",
              "                                     max_cat_threshold=None,\n",
              "                                     max_cat_to_onehot=None,\n",
              "                                     max_delta_step=None, max_depth=None,\n",
              "                                     max_leaves=None, min_child_weight=None,\n",
              "                                     missing=nan, monotone_constraints=None,\n",
              "                                     multi_strategy=None, n_estimators=None,\n",
              "                                     n_jobs=None, num_parallel_tree=None,\n",
              "                                     random_state=None, ...),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;learning_rate&#x27;: [0.01, 0.1, 1],\n",
              "                         &#x27;max_depth&#x27;: [1, 2, 3, 4, 5],\n",
              "                         &#x27;n_estimators&#x27;: [300, 350, 400]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: XGBClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">XGBClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the best hyperparameters\n",
        "print(grid_xgb.best_estimator_, grid_xgb.best_params_, grid_xgb.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ae825486-2a25-4d7a-cb13-95dbf602131e",
        "id": "5N6Rtgwrs_e8"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
            "              colsample_bylevel=None, colsample_bynode=None,\n",
            "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
            "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
            "              gamma=None, grow_policy=None, importance_type=None,\n",
            "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
            "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
            "              max_delta_step=None, max_depth=5, max_leaves=None,\n",
            "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
            "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
            "              num_parallel_tree=None, random_state=None, ...) {'learning_rate': 0.1, 'max_depth': 5, 'n_estimators': 300} 0.9759928633620711\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# testing grid_xgb model on test data\n",
        "y_predict_grid_xgb = grid_xgb.predict(X_test_features)\n",
        "print(classification_report(y_test, y_predict_grid_xgb))\n",
        "print(confusion_matrix(y_test, y_predict_grid_xgb))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "79f1e854-61ac-4489-b10a-bc6171deda14",
        "id": "s-J3cKTes_e8"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.99      0.98       966\n",
            "           1       0.93      0.77      0.85       149\n",
            "\n",
            "    accuracy                           0.96      1115\n",
            "   macro avg       0.95      0.88      0.91      1115\n",
            "weighted avg       0.96      0.96      0.96      1115\n",
            "\n",
            "[[958   8]\n",
            " [ 34 115]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Best Parameters : {'learning_rate': 0.1, 'max_depth': 5, 'n_estimators': 300}"
      ],
      "metadata": {
        "id": "vF8wza_Ys_e8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Final Model : XG Boost Classifer"
      ],
      "metadata": {
        "id": "6EMozUZUtzcU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the model with best hyper parameter\n",
        "model2 = XGBClassifier(learning_rate= 0.1, max_depth= 5, n_estimators=300)"
      ],
      "metadata": {
        "id": "qy290654tzcr"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the training data with best features of svc\n",
        "model2.fit(X_train_features,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "outputId": "f398eed0-2ea5-47b1-d2ee-e2bef35a7585",
        "id": "DBxD21S3tzcr"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=5, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-6 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-6 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-6 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-6 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-6 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-6 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=5, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;XGBClassifier<span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=5, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(X_train_features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "id": "Y-PqwvwN7x2i",
        "outputId": "f6c3ad28-8495-41c1-a9e7-08acc552a8bd"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "scipy.sparse._csr.csr_matrix"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>scipy.sparse._csr.csr_matrix</b><br/>def __init__(arg1, shape=None, dtype=None, copy=False)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/scipy/sparse/_csr.py</a>Compressed Sparse Row matrix\n",
              "\n",
              "This can be instantiated in several ways:\n",
              "    csr_array(D)\n",
              "        with a dense matrix or rank-2 ndarray D\n",
              "\n",
              "    csr_array(S)\n",
              "        with another sparse matrix S (equivalent to S.tocsr())\n",
              "\n",
              "    csr_array((M, N), [dtype])\n",
              "        to construct an empty matrix with shape (M, N)\n",
              "        dtype is optional, defaulting to dtype=&#x27;d&#x27;.\n",
              "\n",
              "    csr_array((data, (row_ind, col_ind)), [shape=(M, N)])\n",
              "        where ``data``, ``row_ind`` and ``col_ind`` satisfy the\n",
              "        relationship ``a[row_ind[k], col_ind[k]] = data[k]``.\n",
              "\n",
              "    csr_array((data, indices, indptr), [shape=(M, N)])\n",
              "        is the standard CSR representation where the column indices for\n",
              "        row i are stored in ``indices[indptr[i]:indptr[i+1]]`` and their\n",
              "        corresponding values are stored in ``data[indptr[i]:indptr[i+1]]``.\n",
              "        If the shape parameter is not supplied, the matrix dimensions\n",
              "        are inferred from the index arrays.\n",
              "\n",
              "Attributes\n",
              "----------\n",
              "dtype : dtype\n",
              "    Data type of the matrix\n",
              "shape : 2-tuple\n",
              "    Shape of the matrix\n",
              "ndim : int\n",
              "    Number of dimensions (this is always 2)\n",
              "nnz\n",
              "    Number of stored values, including explicit zeros\n",
              "data\n",
              "    CSR format data array of the matrix\n",
              "indices\n",
              "    CSR format index array of the matrix\n",
              "indptr\n",
              "    CSR format index pointer array of the matrix\n",
              "has_sorted_indices\n",
              "    Whether indices are sorted\n",
              "\n",
              "Notes\n",
              "-----\n",
              "\n",
              "Sparse matrices can be used in arithmetic operations: they support\n",
              "addition, subtraction, multiplication, division, and matrix power.\n",
              "\n",
              "Advantages of the CSR format\n",
              "  - efficient arithmetic operations CSR + CSR, CSR * CSR, etc.\n",
              "  - efficient row slicing\n",
              "  - fast matrix vector products\n",
              "\n",
              "Disadvantages of the CSR format\n",
              "  - slow column slicing operations (consider CSC)\n",
              "  - changes to the sparsity structure are expensive (consider LIL or DOK)\n",
              "\n",
              "Canonical Format\n",
              "    - Within each row, indices are sorted by column.\n",
              "    - There are no duplicate entries.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "\n",
              "&gt;&gt;&gt; import numpy as np\n",
              "&gt;&gt;&gt; from scipy.sparse import csr_array\n",
              "&gt;&gt;&gt; csr_array((3, 4), dtype=np.int8).toarray()\n",
              "array([[0, 0, 0, 0],\n",
              "       [0, 0, 0, 0],\n",
              "       [0, 0, 0, 0]], dtype=int8)\n",
              "\n",
              "&gt;&gt;&gt; row = np.array([0, 0, 1, 2, 2, 2])\n",
              "&gt;&gt;&gt; col = np.array([0, 2, 2, 0, 1, 2])\n",
              "&gt;&gt;&gt; data = np.array([1, 2, 3, 4, 5, 6])\n",
              "&gt;&gt;&gt; csr_array((data, (row, col)), shape=(3, 3)).toarray()\n",
              "array([[1, 0, 2],\n",
              "       [0, 0, 3],\n",
              "       [4, 5, 6]])\n",
              "\n",
              "&gt;&gt;&gt; indptr = np.array([0, 2, 3, 6])\n",
              "&gt;&gt;&gt; indices = np.array([0, 2, 2, 0, 1, 2])\n",
              "&gt;&gt;&gt; data = np.array([1, 2, 3, 4, 5, 6])\n",
              "&gt;&gt;&gt; csr_array((data, indices, indptr), shape=(3, 3)).toarray()\n",
              "array([[1, 0, 2],\n",
              "       [0, 0, 3],\n",
              "       [4, 5, 6]])\n",
              "\n",
              "Duplicate entries are summed together:\n",
              "\n",
              "&gt;&gt;&gt; row = np.array([0, 1, 2, 0])\n",
              "&gt;&gt;&gt; col = np.array([0, 1, 1, 0])\n",
              "&gt;&gt;&gt; data = np.array([1, 2, 4, 8])\n",
              "&gt;&gt;&gt; csr_array((data, (row, col)), shape=(3, 3)).toarray()\n",
              "array([[9, 0, 0],\n",
              "       [0, 2, 0],\n",
              "       [0, 4, 0]])\n",
              "\n",
              "As an example of how to construct a CSR matrix incrementally,\n",
              "the following snippet builds a term-document matrix from texts:\n",
              "\n",
              "&gt;&gt;&gt; docs = [[&quot;hello&quot;, &quot;world&quot;, &quot;hello&quot;], [&quot;goodbye&quot;, &quot;cruel&quot;, &quot;world&quot;]]\n",
              "&gt;&gt;&gt; indptr = [0]\n",
              "&gt;&gt;&gt; indices = []\n",
              "&gt;&gt;&gt; data = []\n",
              "&gt;&gt;&gt; vocabulary = {}\n",
              "&gt;&gt;&gt; for d in docs:\n",
              "...     for term in d:\n",
              "...         index = vocabulary.setdefault(term, len(vocabulary))\n",
              "...         indices.append(index)\n",
              "...         data.append(1)\n",
              "...     indptr.append(len(indices))\n",
              "...\n",
              "&gt;&gt;&gt; csr_array((data, indices, indptr), dtype=int).toarray()\n",
              "array([[2, 1, 0, 0],\n",
              "       [0, 1, 1, 1]])</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 370);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Evaluation : XG Boost Classifer"
      ],
      "metadata": {
        "id": "FMwHBza2t9uY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the test data\n",
        "y_predict_model2 = model2.predict(X_test_features)"
      ],
      "metadata": {
        "id": "1JMR7YQrt9uZ"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting classification report\n",
        "print(classification_report(y_test, y_predict_model2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "732364d5-3c14-45dd-b2a6-0538b0c97d9e",
        "id": "-xirIMkPt9ua"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.99      0.98       966\n",
            "           1       0.93      0.77      0.85       149\n",
            "\n",
            "    accuracy                           0.96      1115\n",
            "   macro avg       0.95      0.88      0.91      1115\n",
            "weighted avg       0.96      0.96      0.96      1115\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#model2 accuracy on training data\n",
        "y_train_predict_model2 = model2.predict(X_train_features)\n",
        "train_data_accuracy_model2 = accuracy_score(y_train_predict_model2, y_train)\n",
        "print('Accuracy on training data: ',train_data_accuracy_model2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ca3f7a11-4a6c-4c5f-bd76-5f55da085993",
        "id": "KTQJdDQtt9ub"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on training data:  0.9899035225487997\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# classification report on training data of model2\n",
        "print(classification_report(y_train, y_train_predict_model2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c10f65f7-b872-4a22-840e-3d3a7a68d60e",
        "id": "b0I18uKdt9ub"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.99      1.00      0.99      3859\n",
            "           1       1.00      0.92      0.96       598\n",
            "\n",
            "    accuracy                           0.99      4457\n",
            "   macro avg       0.99      0.96      0.98      4457\n",
            "weighted avg       0.99      0.99      0.99      4457\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of training data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_train, y_train_predict_model2)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['Ham', 'Spam'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 661
        },
        "outputId": "f22d0066-1e91-4356-aa73-5ad57a510847",
        "id": "SUvfL8s8t9uc"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#model2 accuracy on test data\n",
        "y_test_predict_model2 = model2.predict(X_test_features)\n",
        "test_data_accuracy_model2 = accuracy_score(y_test_predict_model2, y_test)\n",
        "print('Accuracy on test data: ',test_data_accuracy_model2 )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b465a41d-21cc-4c69-89d0-e9f549fac572",
        "id": "nCnXEFJUt9uc"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on test data:  0.9820627802690582\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#classification report on test data of model2\n",
        "print(classification_report(y_test, y_test_predict_model2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82b794cd-fa09-48e6-a792-d37ee47420f6",
        "id": "MBQhE0Wht9ud"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      1.00      0.99       966\n",
            "           1       0.97      0.89      0.93       149\n",
            "\n",
            "    accuracy                           0.98      1115\n",
            "   macro avg       0.98      0.94      0.96      1115\n",
            "weighted avg       0.98      0.98      0.98      1115\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of training data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_test, y_test_predict_model2)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['Ham', 'Spam'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "outputId": "8f627b81-4038-4354-b594-f3b3cabf74e8",
        "id": "D_8IvFRTt9ud"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ngExBunxt9ud"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "R3f0BzPlt9ud"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3. Random Forest Classifier"
      ],
      "metadata": {
        "id": "WWuttN5NudF1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Random Forest Classifier as the 3rd highest accuracy based on cross validation score according to its default hyperparameters\n",
        "\n",
        "RandomForestClassifier() = 97.59926117175743 %"
      ],
      "metadata": {
        "id": "wchEgoJBudGM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading rfc\n",
        "rfc = RandomForestClassifier()"
      ],
      "metadata": {
        "id": "ELrPpc78udGM"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the default model with its best features\n",
        "rfc.fit(X_train_features,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "outputId": "82f4b978-e70b-4f66-902e-279e017ae96c",
        "id": "ZX_WGn-XudGM"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-7 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-7 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-7 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-7 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-7 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-7 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-7 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-7 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-7 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-7 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-7 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-7 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-7 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the labels on test data\n",
        "y_predict_rfc = rfc.predict(X_test_features)"
      ],
      "metadata": {
        "id": "1q6G-zu5udGN"
      },
      "execution_count": 87,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, y_predict_rfc))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e544d2da-b9d2-42db-a017-8ed75a82d7bc",
        "id": "8_5hx2M_udGO"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      1.00      0.98       966\n",
            "           1       1.00      0.78      0.88       149\n",
            "\n",
            "    accuracy                           0.97      1115\n",
            "   macro avg       0.98      0.89      0.93      1115\n",
            "weighted avg       0.97      0.97      0.97      1115\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test, y_predict_rfc))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "10c3f972-f421-4e1b-a1bf-f045312489bc",
        "id": "Qz_WJFBDudGO"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[966   0]\n",
            " [ 33 116]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "YeIoe5V7t7Bb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hyperparameter Tuning : Random Forest Classifier"
      ],
      "metadata": {
        "id": "nsS_bf42vLYj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#setting the hyperparameters\n",
        "params_rfc = {\n",
        "    'n_estimators': [100, 200,300, 400],\n",
        "    'max_depth': [10, 20, 30,40],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4]\n",
        "    }"
      ],
      "metadata": {
        "id": "NR0zCXlPvLY6"
      },
      "execution_count": 90,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the data and model to grid search cv\n",
        "grid_rfc = GridSearchCV(estimator=rfc, param_grid=params_rfc, cv=5, n_jobs=-1)\n",
        "grid_rfc.fit(X_train_features,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        },
        "outputId": "8f6b152a-ffeb-45e9-a007-34b5189d354b",
        "id": "AJn2umaMvLY6"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=RandomForestClassifier(), n_jobs=-1,\n",
              "             param_grid={'max_depth': [10, 20, 30, 40],\n",
              "                         'min_samples_leaf': [1, 2, 4],\n",
              "                         'min_samples_split': [2, 5, 10],\n",
              "                         'n_estimators': [100, 200, 300, 400]})"
            ],
            "text/html": [
              "<style>#sk-container-id-8 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-8 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-8 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-8 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-8 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-8 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-8 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-8 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-8 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-8 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-8 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-8 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-8 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(), n_jobs=-1,\n",
              "             param_grid={&#x27;max_depth&#x27;: [10, 20, 30, 40],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200, 300, 400]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(), n_jobs=-1,\n",
              "             param_grid={&#x27;max_depth&#x27;: [10, 20, 30, 40],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200, 300, 400]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier()</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the best hyperparameters\n",
        "print(grid_rfc.best_estimator_, grid_rfc.best_params_, grid_rfc.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a6ea9ce0-57de-4c72-cbcb-d258bd104e43",
        "id": "Ss3qVMpSvLY7"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RandomForestClassifier(max_depth=40, min_samples_split=5) {'max_depth': 40, 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 100} 0.9708311314439865\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# testing grid_rfc model on test data\n",
        "y_predict_grid_rfc = grid_rfc.predict(X_test_features)\n",
        "print(classification_report(y_test, y_predict_grid_rfc))\n",
        "print(confusion_matrix(y_test, y_predict_grid_rfc))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c62a00a4-8a5a-479e-8ac2-de37ca9ceacb",
        "id": "3YekOmsTvLY7"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      1.00      0.98       966\n",
            "           1       1.00      0.74      0.85       149\n",
            "\n",
            "    accuracy                           0.97      1115\n",
            "   macro avg       0.98      0.87      0.91      1115\n",
            "weighted avg       0.97      0.97      0.96      1115\n",
            "\n",
            "[[966   0]\n",
            " [ 39 110]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Best Parameters : {'max_depth': 40, 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 100}"
      ],
      "metadata": {
        "id": "-BkTWB2hvLY8"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "HKv7sMout697"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Final Model : Random Forest Classifier"
      ],
      "metadata": {
        "id": "D_ZVJu6XwPTx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the model with best hyper parameter\n",
        "model3 = RandomForestClassifier(max_depth=40, min_samples_split=5)"
      ],
      "metadata": {
        "id": "4bvPXkvSwPT7"
      },
      "execution_count": 94,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the training data with best features of svc\n",
        "model3.fit(X_train_features,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "outputId": "2d2fea09-7611-4cdb-f4b4-4843dd324074",
        "id": "M18zugDewPT7"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(max_depth=40, min_samples_split=5)"
            ],
            "text/html": [
              "<style>#sk-container-id-9 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-9 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-9 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-9 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-9 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-9 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-9 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-9 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-9 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-9 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-9 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=40, min_samples_split=5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" checked><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=40, min_samples_split=5)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Jjq1Vhozt67V"
      },
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Evaluation : Random Forest Classifier"
      ],
      "metadata": {
        "id": "6I3BLrBTwd-7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the test data\n",
        "y_predict_model3 = model3.predict(X_test_features)"
      ],
      "metadata": {
        "id": "qBYKu70Jwd_Q"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting classification report\n",
        "print(classification_report(y_test, y_predict_model3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7a7d2ff6-fe2e-44d3-d9f6-fb158d4dc314",
        "id": "uVLoLR_pwd_Q"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      1.00      0.98       966\n",
            "           1       1.00      0.74      0.85       149\n",
            "\n",
            "    accuracy                           0.97      1115\n",
            "   macro avg       0.98      0.87      0.92      1115\n",
            "weighted avg       0.97      0.97      0.96      1115\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#model3 accuracy on training data\n",
        "y_train_predict_model3 = model3.predict(X_train_features)\n",
        "train_data_accuracy_model3 = accuracy_score(y_train_predict_model3, y_train)\n",
        "print('Accuracy on training data: ',train_data_accuracy_model3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "69ff7c49-4492-44b3-a032-e55b249c76a8",
        "id": "Aior41hDwd_R"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on training data:  0.9818263405878394\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# classification report on training data of model3\n",
        "print(classification_report(y_train, y_train_predict_model3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4c5e7672-3b01-4434-ac18-1a0d718b98fe",
        "id": "OeC0cA9xwd_S"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      1.00      0.99      3859\n",
            "           1       1.00      0.86      0.93       598\n",
            "\n",
            "    accuracy                           0.98      4457\n",
            "   macro avg       0.99      0.93      0.96      4457\n",
            "weighted avg       0.98      0.98      0.98      4457\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of training data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_train, y_train_predict_model3)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['Ham', 'Spam'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 661
        },
        "outputId": "6c7c2e85-63b3-46f1-ca35-177baebfd4c9",
        "id": "na5VvTOkwd_S"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "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aaPo6GjnsWjRIklSQECAVq1apfbt26tBgwZ66KGH1K1bN3388cfOe/j7+2vZsmXy9/dXYmKievbsqd69e+uxxx5ztqldu7ZSU1OVlpamJk2aaObMmZo7d26pt+WSWAAGAACAP3BcYruF2NhYrVu37pL3iYuL0yeffPKnbdq0aaOvv/7arfH9HsUsAACAgczw0gQzYZoBAAAATItiFgAAAKbFNAMAAAADefMNYL6IZBYAAACmRTILAABgoOJk1tgFWSSzAAAAwBWIYhYAAACmxTQDAAAAA13OG7k80aevIpkFAACAaZHMAgAAGMjx22F0n76KZBYAAACmRTILAABgIObMehbJLAAAAEyLYhYAAACmxTQDAAAAI7ECzKNIZgEAAGBaJLMAAABG8sICMLEADAAAALjyUMwCAADAtJhmAAAAYCCHo/gwuk9fRTILAAAA0yKZBQAAMBBvAPMsklkAAACYFsksAACAkRwW47fKIpkFAAAArjwUswAAADAtphkAAAAYiK25PItkFgAAAKZFMgsAAGAkx2+H0X36KJJZAAAAmBbFLAAAAEyLaQYAAAAG4g1gnkUyCwAAANMimQUAADCaDy/IMhrJLAAAAEyLZBYAAMBAzJn1LJJZAAAAmBbFLAAAAEyLaQYAAABG4g1gHkUyCwAAANMimQUAADCU5bfD6D59E8ksAAAATItiFgAAAKbFNAMAAAAjsQDMo0hmAQAAYFokswAAAEYimfUoklkAAACYFsksAACAkRyW4sPoPn0UySwAAABMi2IWAAAApsU0AwAAAAM5HMWH0X36KpJZAAAAmFapktmPPvqo1De85557LnswAAAAPo+tuTyqVMVsly5dSnUzi8Uim832V8YDAAAAlFqpilm73V7W4wAAAADc9pcWgJ07d05BQUGeGgsAAIDvY59Zj3J7AZjNZtPjjz+u6tWrKyQkRPv27ZMkTZo0SW+88YbHBwgAAABcjNvF7JNPPqmUlBRNnz5dAQEBzvPXXXed5s6d69HBAQAA+BqLwzuHr3K7mH377bf173//Wz169JC/v7/zfJMmTfTdd995dHAAAADAn3F7zuzPP/+s+Pj4887b7XYVFhZ6ZFAAAAA+i625PMrtZDYhIUEbNmw47/z777+v66+/3iODAgAAAErD7WR28uTJ6tOnj37++WfZ7XZ9+OGH2rNnj95++20t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AAAjsQDMo0hmAQAAYFokswAAAAZizqxnkcwCAADAtChmAQAAYFpMMwAAADASC8A8imQWAAAApkUyCwAAYCSSWY8imQUAAIBpUcwCAADAtJhmAAAAYCD2mfUsklkAAACYFsksAACAkVgA5lEkswAAADAtilkAAAAjObx0uGH9+vW6++67FRMTI4vFoqVLl7pc79u3rywWi8vRoUMHlzYnTpxQjx49ZLVaFR4erv79++v06dMubbZv365bb71VQUFBio2N1fTp090bqChmAQAA8Ad5eXlq0qSJXnnllYu26dChg44cOeI83n33XZfrPXr00K5du5SWlqZly5Zp/fr1GjRokPN6bm6u2rdvr7i4OG3btk0zZszQ1KlT9e9//9utsTJnFgAAAC46duyojh07/mmbwMBARUVFXfDa7t27tWLFCn355Zdq0aKFJOmll15Sp06d9OyzzyomJkbz589XQUGB3nzzTQUEBOjaa69VRkaGnnvuOZei91JIZgEAAAxUsjWX0YdUnIb+/sjPz7/s51i7dq0iIiJUv359DRkyRMePH3deS09PV3h4uLOQlaR27drJz89PmzdvdrZp3bq1AgICnG2SkpK0Z88e/frrr6UeB8UsAADAVSI2NlZhYWHOY9q0aZd1nw4dOujtt9/W6tWr9cwzz2jdunXq2LGjbDabJCkrK0sREREu3ylXrpwqV66srKwsZ5vIyEiXNiWfS9qUBtMMAAAAjOTFrbkOHTokq9XqPB0YGHhZt+vevbvz140aNVLjxo11zTXXaO3atbrjjjv+0lDdRTILAABwlbBarS7H5Razf1SnTh1VrVpVe/fulSRFRUXp6NGjLm2Kiop04sQJ5zzbqKgoZWdnu7Qp+XyxubgXQjELAACAv+Snn37S8ePHFR0dLUlKTEzUyZMntW3bNmebNWvWyG63q2XLls4269evV2FhobNNWlqa6tevr0qVKpW6b4pZAAAAA3lzAVhpnT59WhkZGcrIyJAk7d+/XxkZGTp48KBOnz6tsWPHatOmTTpw4IBWr16tzp07Kz4+XklJSZKkhg0bqkOHDho4cKC2bNmiL774QsOHD1f37t0VExMjSXrggQcUEBCg/v37a9euXVq0aJFmzZql0aNHuzVWilkAAAC42Lp1q66//npdf/31kqTRo0fr+uuv1+TJk+Xv76/t27frnnvuUb16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+fIuny0Wi8s5i8UiSbLb7WX4NACCgoJ05513atKkSdq4caP69u2rKVOmlOq76enp6tGjhzp16qRly5bp66+/1iOPPOL2n/eSc/x5B4xHMQv8wRdffKHOnTurZ8+eatKkierUqaPvv//e28MCUEoJCQnKy8tzft60aZPL9U2bNqlhw4aSpI0bNyouLk6PPPKIWrRoobp16+rHH380dLwA/hqmGQB/ULduXb3//vvauHGjKlWqpOeee07Z2dlKSEjw9tAA/M7x48d133336cEHH1Tjxo0VGhqqrVu3avr06ercubOz3XvvvacWLVrolltu0fz587Vlyxa98cYbkor/vB88eFALFy7UDTfcoNTUVC1ZssRbj4Srhd0uyeAU34d/akAxC/zBxIkTtW/fPiUlJSk4OFiDBg1Sly5dlJOT4+2hAfidkJAQtWzZUs8//7wyMzNVWFio2NhYDRw4UP/617+c7R599FEtXLhQQ4cOVXR0tN59913nP07vuecejRo1SsOHD1d+fr6Sk5M1adIkTZ061UtPBcBd7GYAAPBZFotFS5YsueCb/wCjOXczqNbfO7sZHHvDJ3czYM4sAAAATItpBgAAAEZiay6PopgFAPgsZtIBvo9pBgAAADAtklkAAAAj2R2SDP6pgd13f0pBMgsAAADTIpkFAAAwkMNhl8Nh7EsMjO7PSCSzAEypb9++LnuHtmnTRiNHjjR8HGvXrpXFYtHJkycv2sZisWjp0qWlvufUqVPVtGnTvzSuAwcOyGKxKCMj4y/dBwCudBSzADymb9++slgsslgsCggIUHx8vB577DEVFRWVed8ffvihHn/88VK1LU0BCgAwB6YZAPCoDh066K233lJ+fr4++eQTDRs2TOXLl9eECRPOa1tQUKCAAM+8Bady5coeuQ8AlDmHw/gFWT68TR3JLACPCgwMVFRUlOLi4jRkyBC1a9dOH330kaT/TQ148sknFRMTo/r160uSDh06pL///e8KDw9X5cqV1blzZx04cMB5T5vNptGjRys8PFxVqlTRuHHjzts/9I/TDPLz8zV+/HjFxsYqMDBQ8fHxeuONN3TgwAG1bdtWklSpUiVZLBb17dtXkmS32zVt2jTVrl1bFSpUUJMmTfT++++79PPJJ5+oXr16qlChgtq2besyztIaP3686tWrp+DgYNWpU0eTJk1SYWHhee1ee+01xcbGKjg4WH//+9+Vk5Pjcn3u3Llq2LChgoKC1KBBA7366qtujwUAzI5kFkCZqlChgo4fP+78vHr1almtVqWlpUmSCgsLlZSUpMTERG3YsEHlypXTE088oQ4dOmj79u0KCAjQzJkzlZKSojfffFMNGzbUzJkztWTJEt1+++0X7bd3795KT0/Xiy++qCZNmmj//v365ZdfFBsbqw8++EDdunXTnj17ZLVaVaFCBUnStGnT9M4772jOnDmqW7eu1q9fr549e6patWq67bbbdOjQIXXt2lXDhg3ToEGDtHXrVj300ENu/56EhoYqJSVFMTEx2rFjhwYOHKjQ0FCNGzfO2Wbv3r1avHixPv74Y+Xm5qp///4aOnSo5s+fL0maP3++Jk+erJdfflnXX3+9vv76aw0cOFAVK1ZUnz593B4TAAM5vLA1lw8nsxSzAMqEw+HQ6tWrtXLlSo0YMcJ5vmLFipo7d65zesE777wju92uuXPnymKxSJLeeusthYeHa+3atWrfvr1eeOEFTZgwQV27dpUkzZkzRytXrrxo399//70WL16stLQ0tWvXTpJUp04d5/WSKQkREREKDw+XVJzkPvXUU1q1apUSExOd3/n888/12muv6bbbbtPs2bN1zTXXaObMmZKk+vXra8eOHXrmmWfc+r2ZOHGi89e1atXSmDFjtHDhQpdi9ty5c3r77bdVvXp1SdJLL72k5ORkzZw5U1FRUZoyZYpmzpzp/D2pXbu2vv32W7322msUswCuKhSzADxq2bJlCgkJUWFhoex2ux544AFNnTrVeb1Ro0Yu82S/+eYb7d27V6GhoS73OXfunDIzM5WTk6MjR46oZcuWzmvlypVTixYtLvqq0oyMDPn7++u2224r9bj37t2rM2fO6M4773Q5X1BQoOuvv16StHv3bpdxSHIWvu5YtGiRXnzxRWVmZur06dMqKiqS1Wp1aVOzZk1nIVvSj91u1549exQaGqrMzEz1799fAwcOdLYpKipSWFiY2+MBYDC7XbIYvFWWD2/NRTELwKPatm2r2bNnKyAgQDExMSpXzvU/MxUrVnT5fPr0aTVv3tz54/Pfq1at2mWNoWTagDtOnz4tSUpNTXUpIqXiecCekp6erh49eujRRx9VUlKSwsLCtHDhQmfa685YX3/99fOKa39/f4+NFQDMgGIWgEdVrFhR8fHxpW7frFkzLVq0SBEREeelkyWio6O1efNmtW7dWlJxArlt2zY1a9bsgu0bNWoku92udevWOacZ/F5JMmyz2ZznEhISFBgYqIMHD1400W3YsKFzMVuJTZs2Xfohf2fjxo2Ki4vTI4884jz3448/ntfu4MGDOnz4sGJiYpz9+Pn5qX79+oqMjFRMTIz27dunHj16uNU/APgadjMA4FU9evRQ1apV1blzZ23YsEH79+/X2rVr9Y9//EM//fSTJOmf//ynnn76aS1dulTfffedhg4d+qd7xNaqVUt9+vTRgw8+qKVLlzrvuXjxYklSXFycLBaLli1bpmPHjun06dMKDQ3VmDFjNGrUKM2bN0+ZmZn66quv9NJLL2nevHmSpMGDB+uHH37Q2LFjtWfPHi1YsEApKSluPW/dunV18OBBLVy4UJmZmXrxxRe1ZMmS89oFBQWpT58++uabb7Rhwwb94x//0N///ndFRUVJkh599FFNmzZNL774or7//nvt2LFDb731lp577jm3xgPACxwO7xw+imIWgFcFBwdr/fr1qlmzprp27aqGDRuqf//+OnfunDOpfeihh9SrVy/16dNHiYmJCg0N1d/+9rc/ve/s2bN17733aujQoWrQoIEGDhyovLw8SVL16tX16KOP6uGHH1ZkZKSGDx8uSXr88cc1adIkTZs2TQ0bNlSHDh2Umpqq2rVrSyqex/rBBx9o6dKlatKkiebMmaOnnnrKree95557NGrUKA0fPlxNmzbVxo0bNWnSpPPaxcfHq2vXrurUqZPat2+vxo0bu2y9NWDAAM2dO1dvvfWWGjVqpNtuu00pKSnOsQLA1cLiuNgKCgAAAHhMbm6uwsLCdHtwd5WzeOaFMaVV5CjQmjMLlZOTc9EpXWZFMgsAAADTopgFAACAabGbAQAAgJF4A5hHkcwCAADAtEhmAQAAjGR3SBaSWU8hmQUAAIBpkcwCAAAYyeGQZPdCn76JZBYAAACmRTELAAAA02KaAQAAgIEcdoccBi8A8+UXvpLMAgAAwLRIZgEAAIzksMv4BWAG92cgklkAAACYFsUsAAAATItiFgAAwEAOu8Mrh7teeeUV1apVS0FBQWrZsqW2bNlSBr8bfx3FLAAAAFwsWrRIo0eP1pQpU/TVV1+pSZMmSkpK0tGjR709tPNQzAIAABjJYffO4YbnnntOAwcOVL9+/ZSQkKA5c+YoODhYb775Zhn9plw+ilkAAAA4FRQUaNu2bWrXrp3znJ+fn9q1a6f09HQvjuzC2JoLAADAQEUqlAx+h0GRCiVJubm5LucDAwMVGBjocu6XX36RzWZTZGSky/nIyEh99913ZTvQy0AxCwAAYICAgABFRUXp86xPvNJ/SEiIYmNjXc5NmTJFU6dO9cp4PIViFgAAwABBQUHav3+/CgoKvNK/w+GQxWJxOffHVFaSqlatKn9/f2VnZ7ucz87OVlRUVJmO8XJQzAIAABgkKChIQUFB3h7GnwoICFDz5s21evVqdenSRZJkt9u1evVqDR8+3LuDuwCKWQAAALgYPXq0+vTpoxYtWujGG2/UCy+8oLy8PPXr18/bQzsPxSwAAABc/N///Z+OHTumyZMnKysrS02bNtWKFSvOWxR2JbA4HA6D19MBAAAAnsE+swAAADAtilkAAACYFsUsAAAATItiFgAAAKZFMQsAAADTopgFAACAaVHMAgAAwLQoZgEAAGBaFLMAAAAwLYpZAAAAmBbFLAAAAEyLYhYAAACm9f8B6YY9rQ2Nz3YAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#model3 accuracy on test data\n",
        "y_test_predict_model3 = model3.predict(X_test_features)\n",
        "test_data_accuracy_model3 = accuracy_score(y_test_predict_model3, y_test)\n",
        "print('Accuracy on test data: ',test_data_accuracy_model3 )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da3050af-44ea-464f-9a7a-2a7b1dbe7e92",
        "id": "9ywTUbZPwd_S"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on test data:  0.9659192825112107\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#classification report on test data of model3\n",
        "print(classification_report(y_test, y_test_predict_model3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eda2a958-1324-4125-c723-2f0c4e5cea77",
        "id": "amTerSFqwd_T"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      1.00      0.98       966\n",
            "           1       1.00      0.74      0.85       149\n",
            "\n",
            "    accuracy                           0.97      1115\n",
            "   macro avg       0.98      0.87      0.92      1115\n",
            "weighted avg       0.97      0.97      0.96      1115\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of training data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_test, y_test_predict_model3)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['Ham', 'Spam'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 661
        },
        "outputId": "6a043735-7942-4b90-c3da-287a5aa7cf2d",
        "id": "9pN3CMeKwd_T"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "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UQUAAIAt0agCAADAlpj6BwAAMMmyyg/TYwYgElUAAADYEokqAACAQSym8h6JKgAAAGyJRhUAAAC2xNQ/AACASTyZymskqgAAALAlElUAAACDWEzlPRJVAAAA2BKJKgAAgEls+O81ElUAAADYEo0qAAAAbImpfwAAAINYTOU9ElUAAADYEokqAACASWz47zUSVQAAANgSjSoAAABsial/AAAAg1hM5T0SVQAAANgSiSoAAIBJLqv8MD1mACJRBQAAgC2RqAIAAJjE9lReI1EFAACALdGoAgAAwJaY+gcAADDIIT9sT2V2OJ8hUQUAAIAtkagCAACYZFnlh+kxAxCJKgAAADxMmTJFl156qWJiYpSQkKDu3btrx44dHtcUFRVpyJAhql27tqKjo9WzZ08dPHjQ45q9e/eqS5cuioyMVEJCgu69916VlZV5XQeNKgAAADysXbtWQ4YM0YYNG7Rq1SqVlpaqY8eOOn78uPuaESNG6LXXXtNLL72ktWvX6sCBA+rRo4f7dafTqS5duqikpETr16/XwoULtWDBAo0dO9brOpj6BwAAMMhh+WExVQXHW7lypcfPCxYsUEJCgrZs2aKrrrpKBQUFmjdvnp5//nlde+21kqT58+erWbNm2rBhgy6//HL9+9//1ueff663335biYmJatWqlSZOnKj7779f48ePV2ho6FnrIFEFAACoJgoLCz2O4uJir95XUFAgSapVq5YkacuWLSotLVWHDh3c1zRt2lT169dXbm6uJCk3N1fNmzdXYmKi+5qsrCwVFhbqs88+82pcGlUAAACTLD8dklJSUhQXF+c+pkyZctZyXS6Xhg8friuuuEIXXXSRJCkvL0+hoaGKj4/3uDYxMVF5eXnua37ZpJ58/eRr3mDqHwAAoJrYt2+fYmNj3T+HhYWd9T1DhgzRp59+qvfff78ySzstGlUAAACDHJYlh+Htok6OFxsb69Gons3QoUO1YsUKvffeezr//PPd55OSklRSUqL8/HyPVPXgwYNKSkpyX7Np0yaPzzu5K8DJa86GqX8AAAB4sCxLQ4cO1bJly/TOO++oYcOGHq+3bt1aNWrU0OrVq93nduzYob179yozM1OSlJmZqW3btunQoUPua1atWqXY2FhlZGR4VQeJKgAAADwMGTJEzz//vP71r38pJibGfU9pXFycIiIiFBcXp/79++vu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69ZNX3/9tfsznU6n7r77bsXHx6t27dq67777Ttkf89dT/8XFxbr//vuVkpKisLAwpaena968efr666/Vvn17SVLNmjXlcDjUt29fSZLL5dKUKVPUsGFDRUREqGXLlnr55Zc9xnnjjTfUuHFjRUREqH379h51euv+++9X48aNFRkZqbS0NOXk5Ki0tPSU65566imlpKQoMjJSN998swoKCjxef+aZZ9SsWTOFh4eradOmevLJJytcCwDYGYkqgEoVERGhw4cPu39evXq1YmNjtWrVKklSaWmpsrKylJmZqXXr1ikkJEQPPfSQOnXqpE8++UShoaF67LHHtGDBAj377LNq1qyZHnvsMS1btkzXXnvtGcf9v//7P+Xm5mrmzJlq2bKl9uzZox9++EEpKSl65ZVX1LNnT+3YsUOxsbGKiIiQJE2ZMkXPPfec5s6dq0aNGum9995T7969dd555+nqq6/Wvn371KNHDw0ZMkQDBw7U5s2bdc8991T4zyQmJkYLFixQcnKytm3bpgEDBigmJkb33Xef+5qvvvpKS5cu1WuvvabCwkL1799fgwcP1uLFiyVJixcv1tixY/W3v/1NF198sT766CMNGDBAUVFR6tOnT4VrAmCQ5YftqQI0UaVRBVApLMvS6tWr9dZbb2nYsGHu81FRUXrmmWfcU/7PPfecXC6XnnnmGTkcDknS/PnzFR8frzVr1qhjx46aMWOGRo8erR49ekiS5s6dq7feeuuMY+/cuVNLly7VqlWr1KFDB0lSWlqa+/WTtwkkJCQoPj5eUnkCO3nyZL399tvKzMx0v+f999/XU089pauvvlpz5szRBRdcoMcee0yS1KRJE23btk1Tp06t0J/NmDFj3P/doEEDjRw5UkuWLPFoVIuKirRo0SLVq1dPkjRr1ix16dJFjz32mJKSkjRu3Dg99thj7j+Thg0b6vPPP9dTTz1FowqgyqBRBeBTK1asUHR0tEpLS+VyufSnP/1J48ePd7/evHlzj/tSP/74Y3311VeKiYnx+JyioiLt2rVLBQUF+u6779S2bVv3ayEhIWrTps0ZH4+5detWBQcH6+qrr/a67q+++konTpzQ9ddf73G+pKREF198sSRp+/btHnVIcje1FfHiiy9q5syZ2rVrl44dO6aysjLFxsZ6XFO/fn13k3pyHJfLpR07digmJka7du1S//79NWDAAPc1ZWVliouLq3A9AAxzuSSH4e2iAnR7KhpVAD7Vvn17zZkzR6GhoUpOTlZIiOf/zURFRXn8fOzYMbVu3do9pf1L55133jnVcHIqvyKOHTsmSXr99dc9GkSp/L5bX8nNzVV2drYmTJigrKwsxcXFacmSJe6UtiK1Pv3006c0zsHBwT6rFQD8jUYVgE9FRUUpPT3d6+svueQSvfjii0pISDglVTypbt262rhxo6666ipJ5cnhli1bdMkll5z2+ubNm8vlcmnt2rXuqf9fOpnoOp1O97mMjAyFhYVp7969Z0ximzVr5l4YdtKGDRvO/iV/Yf369UpNTdUDDzzgPvfNN9+cct3evXt14MABJScnu8cJCgpSkyZNlJiYqOTkZO3evVvZ2dkVGh8AAgmr/gH4VXZ2turUqaNu3bpp3bp12rNnj9asWaM777xT3377rSTprrvu0sMPP6zly5friy++0ODBg//nHqgNGjRQnz59dPvtt2v58uXuz1y6dKkkKTU1VQ6HQytWrND333+vY8eOKSYmRiNHjtSIESO0cOFC7dq1Sx9++KFmzZqlhQsXSpL+8pe/6Msvv9S9996rHTt26Pnnn9eCBQsq9H0bNWqkvXv3asmSJdq1a5dmzpypZcuWnXJdeHi4+vTpo48//ljr1q3TnXfeqZtvvllJSUmSpAkTJmjKlCmaOXOmdu7cqW3btmn+/Pl6/PHHK1QPAD+wLP8cAYhGFYBfRUZG6r333lP9+vXVo0cPNWvWTP3791dRUZE7Yb3nnnt02223qU+fPsrMzFRMTIz+8Ic//M/PnTNnjv74xz9q8ODBatq0qQYMGKDjx49LkurVq6cJEyZo1KhRSkxM1NChQyVJEydOVE5OjqZMmaJmzZqpU6dOev3119WwYUNJ5feNvvLKK1q+fLlatmypuXPnavLkyRX6vl27dtWIESM0dOhQtWrVSuvXr1dOTs4p16Wnp6tHjx7q3LmzOnbsqBYtWnhsP3XHHXfomWee0fz589W8eXNdffXVWrBggbtWAKgKHNaZViMAAADAZwoLCxUXF6drI3spxOGbh514q8wq0TsnlqigoOCMt1nZEYkqAAAAbIlGFQAAALbEqn8AAACTeDKV10hUAQAAYEskqgAAACa5LMlBouoNElUAAADYEokqAACASZYlyeWHMQMPiSoAAABsiUYVAAAAtsTUPwAAgEGWy5JleDFVoD6IlEQVAAAAtkSiCgAAYJLlkvnFVIbH8xESVQAAANgSjSoAAABsiUYVAADAIMtl+eWoqNmzZ6tBgwYKDw9X27ZttWnTpkr40/jfaFQBAADg4cUXX9Tdd9+tcePG6cMPP1TLli2VlZWlQ4cOGa2DRhUAAMAky+WfowIef/xxDRgwQP369VNGRobmzp2ryMhIPfvss5X0h3J6NKoAAABwKykp0ZYtW9ShQwf3uaCgIHXo0EG5ublGa2F7KgAAAIPKVCoZ3n+/TKWSpMLCQo/zYWFhCgsL8zj3ww8/yOl0KjEx0eN8YmKivvjii8ot9FdoVAEAAAwIDQ1VUlKS3s97wy/jR0dHKyUlxePcuHHjNH78eL/U4w0aVQAAAAPCw8O1Z88elZSU+GV8y7LkcDg8zv06TZWkOnXqKDg4WAcPHvQ4f/DgQSUlJVVqjb9GowoAAGBIeHi4wsPD/V3G/xQaGqrWrVtr9erV6t69uyTJ5XJp9erVGjp0qNFaaFQBAADg4e6771afPn3Upk0bXXbZZZoxY4aOHz+ufv36Ga2DRhUAAAAebrnlFn3//fcaO3as8vLy1KpVK61cufKUBVaVzWFZluF1ZwAAAMDZsY8qAAAAbIlGFQAAALZEowoAAABbolEFAACALdGoAgAAwJZoVAEAAGBLNKoAAACwJRpVAAAA2BKNKgAAAGyJRhUAAAC2RKMKAAAAW6JRBQAAgC39PxvbwNtbtqSWAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8eIi-iqWwd_T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Conclusion"
      ],
      "metadata": {
        "id": "ZgWYYJtPA-kb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model 1 : Support Vector Classifer\n",
        "\n",
        "Training Data Accuracy : 99.977%\n",
        "\n",
        "Testing Data Accuracy : 98.206%\n",
        "\n",
        "Model 2 :XG Boost Classifier\n",
        "\n",
        "Training Data Accuracy : 98.990%\n",
        "\n",
        "Testing Data Accuracy : 98.206%\n",
        "\n",
        "Model 3 : Random Forest Classifier\n",
        "\n",
        "Training Data Accuracy : 98.182%\n",
        "\n",
        "Testing Data Accuracy : 96.591%"
      ],
      "metadata": {
        "id": "sEY9iMINCNrr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Predictive System"
      ],
      "metadata": {
        "id": "XQTIpm80BCVH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Buliding a Predictive System for here"
      ],
      "metadata": {
        "id": "88tMiL1lBEiG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#taking input data\n",
        "input_mail = [\"Message me on number:498274091 you have won prize $2399329\"]\n",
        "\n",
        "#convert text to feature vectors\n",
        "input_data_features = feature_extraction.transform(input_mail)\n",
        "\n",
        "#predictions\n",
        "prediction1 = model1.predict(input_data_features)\n",
        "prediction2 = model2.predict(input_data_features)\n",
        "prediction3 = model3.predict(input_data_features)\n",
        "\n",
        "print(prediction1)\n",
        "if(prediction1[0]==0):\n",
        "  print('Ham Mail')\n",
        "else:\n",
        "  print('Spam Mail')\n",
        "print(prediction2)\n",
        "if(prediction2[0]==0):\n",
        "  print('Ham Mail')\n",
        "else:\n",
        "  print('Spam Mail')\n",
        "print(prediction3)\n",
        "if(prediction3[0]==0):\n",
        "  print('Ham Mail')\n",
        "else:\n",
        "  print('Spam Mail')"
      ],
      "metadata": {
        "id": "bM8qTzNLE_vD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1b220cf1-3496-4cd3-c4eb-b16364ace8f7"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1]\n",
            "Spam Mail\n",
            "[0]\n",
            "Ham Mail\n",
            "[0]\n",
            "Ham Mail\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Building the Predictive System to export"
      ],
      "metadata": {
        "id": "_e65i2pzBh5z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "import pickle\n",
        "with open('feature_extraction.pkl', 'wb') as f:\n",
        "    pickle.dump(feature_extraction, f)\n",
        "with open('spam_mail_prediction_trained_svc_model.sav', 'wb') as f:\n",
        "    pickle.dump(model1, f)\n",
        "with open('spam_mail_prediction_trained_xgb_model.sav', 'wb') as f:\n",
        "    pickle.dump(model2, f)\n",
        "with open('spam_mail_prediction_trained_rfc_model.sav', 'wb') as f:\n",
        "    pickle.dump(model3, f)"
      ],
      "metadata": {
        "id": "ysPYSK0zA5z1"
      },
      "execution_count": 117,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#loading the saved model\n",
        "with open('feature_extraction.pkl', 'rb') as f:\n",
        "    loaded_model_feature_extraction = pickle.load(f)\n",
        "with open('spam_mail_prediction_trained_svc_model.sav', 'rb') as f:\n",
        "    loaded_model_svc = pickle.load(f)\n",
        "with open('spam_mail_prediction_trained_xgb_model.sav', 'rb') as f:\n",
        "    loaded_model_xgb = pickle.load(f)\n",
        "with open('spam_mail_prediction_trained_rfc_model.sav', 'rb') as f:\n",
        "    loaded_model_rfc = pickle.load(f)"
      ],
      "metadata": {
        "id": "3mUvmjqMA5w1"
      },
      "execution_count": 118,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#taking input data\n",
        "input_mail = [\"Message me on number:498274091 you have won prize $2399329\"]\n",
        "\n",
        "#convert text to feature vectors\n",
        "input_data_features = loaded_model_feature_extraction.transform(input_mail)\n",
        "\n",
        "#predictions\n",
        "prediction1 = loaded_model_svc.predict(input_data_features)\n",
        "prediction2 = loaded_model_xgb.predict(input_data_features)\n",
        "prediction3 = loaded_model_rfc.predict(input_data_features)\n",
        "\n",
        "print(prediction1)\n",
        "if(prediction1[0]==0):\n",
        "  print('Ham Mail')\n",
        "else:\n",
        "  print('Spam Mail')\n",
        "print(prediction2)\n",
        "if(prediction2[0]==0):\n",
        "  print('Ham Mail')\n",
        "else:\n",
        "  print('Spam Mail')\n",
        "print(prediction3)\n",
        "if(prediction3[0]==0):\n",
        "  print('Ham Mail')\n",
        "else:\n",
        "  print('Spam Mail')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N4-4lqxz-vwI",
        "outputId": "8dce8e8b-1906-492d-ba4b-0b7eec30d03e"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1]\n",
            "Spam Mail\n",
            "[0]\n",
            "Ham Mail\n",
            "[0]\n",
            "Ham Mail\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "BL2kTGN7--pN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4O8Kbcfx--mS"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}