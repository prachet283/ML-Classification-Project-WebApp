{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "BIh5TI8cOjHp",
        "kRPaVszCjP0P",
        "WNy10AKpl3PC",
        "BvJovCmSmeiQ",
        "W5uISwMYmyD6",
        "JBBbWJ7AOoEF",
        "17swU-aKQoqw",
        "bHGbJG38rai0",
        "ffaSarfur6zO",
        "BUYMESf8-_Zu",
        "Tna7YULjfAAP",
        "iiwn8M27fWE9",
        "gVdgF7vifjif"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Upgrading Scikit Learn Library"
      ],
      "metadata": {
        "id": "aBZQlHvHY6Yt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#install latest sklearn\n",
        "!pip install scikit-learn==1.5.0"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UvePZp9flJSe",
        "outputId": "382c7a80-ca30-4a86-95a8-ff029b59172c"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scikit-learn==1.5.0 in /usr/local/lib/python3.10/dist-packages (1.5.0)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.5.0) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.5.0) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.5.0) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.5.0) (3.5.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Importing Dependencies & Dataset"
      ],
      "metadata": {
        "id": "LHKbsrV0ZL4_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "yyhsU1PHaiPy"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Collection"
      ],
      "metadata": {
        "id": "hzu0t5_CeDWU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#load the data from csv file to pandas dataframe\n",
        "titanic_data = pd.read_csv('/content/titanic.csv')"
      ],
      "metadata": {
        "id": "f0UHp4x4eCnR"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "qtRbOlaIZSce"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# first 5 rows in the dataset\n",
        "titanic_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "UJ0pmWsbeSNz",
        "outputId": "f660471d-b4c8-47f7-d84b-443daf2ee3ee"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name     Sex   Age  SibSp  \\\n",
              "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                           Allen, Mr. William Henry    male  35.0      0   \n",
              "\n",
              "   Parch            Ticket     Fare Cabin Embarked  \n",
              "0      0         A/5 21171   7.2500   NaN        S  \n",
              "1      0          PC 17599  71.2833   C85        C  \n",
              "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3      0            113803  53.1000  C123        S  \n",
              "4      0            373450   8.0500   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b58789b-4a23-429e-8d7c-baf7049fb12d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b58789b-4a23-429e-8d7c-baf7049fb12d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0b58789b-4a23-429e-8d7c-baf7049fb12d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0b58789b-4a23-429e-8d7c-baf7049fb12d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d9d4877f-4a46-4d91-833f-ede316e1f833\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d9d4877f-4a46-4d91-833f-ede316e1f833')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d9d4877f-4a46-4d91-833f-ede316e1f833 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "titanic_data",
              "summary": "{\n  \"name\": \"titanic_data\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334042,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# last 5 rows in the dataset\n",
        "titanic_data.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "1G2tYwTE9AJn",
        "outputId": "3c874a6a-eaea-4e99-b699-11f49a3d69d4"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass                                      Name  \\\n",
              "886          887         0       2                     Montvila, Rev. Juozas   \n",
              "887          888         1       1              Graham, Miss. Margaret Edith   \n",
              "888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n",
              "889          890         1       1                     Behr, Mr. Karl Howell   \n",
              "890          891         0       3                       Dooley, Mr. Patrick   \n",
              "\n",
              "        Sex   Age  SibSp  Parch      Ticket   Fare Cabin Embarked  \n",
              "886    male  27.0      0      0      211536  13.00   NaN        S  \n",
              "887  female  19.0      0      0      112053  30.00   B42        S  \n",
              "888  female   NaN      1      2  W./C. 6607  23.45   NaN        S  \n",
              "889    male  26.0      0      0      111369  30.00  C148        C  \n",
              "890    male  32.0      0      0      370376   7.75   NaN        Q  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0c7131e0-5486-4c96-835b-a73b2b0ba050\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.00</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.45</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.00</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.75</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c7131e0-5486-4c96-835b-a73b2b0ba050')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0c7131e0-5486-4c96-835b-a73b2b0ba050 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0c7131e0-5486-4c96-835b-a73b2b0ba050');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-454871a9-deae-4573-b5f2-802f9f956c53\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-454871a9-deae-4573-b5f2-802f9f956c53')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-454871a9-deae-4573-b5f2-802f9f956c53 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"titanic_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 887,\n        \"max\": 891,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          888,\n          891,\n          889\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Graham, Miss. Margaret Edith\",\n          \"Dooley, Mr. Patrick\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.354126134736337,\n        \"min\": 19.0,\n        \"max\": 32.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          19.0,\n          32.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"112053\",\n          \"370376\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.09253436952285,\n        \"min\": 7.75,\n        \"max\": 30.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          30.0,\n          7.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"C148\",\n          \"B42\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# number of rows & columns\n",
        "titanic_data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J8c63F9_9AG1",
        "outputId": "09dad3e1-ffbc-473a-ebf5-02edcb429191"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(891, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting info about the dataset\n",
        "titanic_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7fLhHk_r9ABf",
        "outputId": "414d2e31-ebb5-4b96-ccb0-c6ba5dedbb21"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# checking null values\n",
        "titanic_data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oY-9su7Z8_-6",
        "outputId": "69358807-652d-4fc0-de11-f32d8e7c2231"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age            177\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Cabin          687\n",
              "Embarked         2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the stats about dataset\n",
        "titanic_data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "qRoMDL2u9gGp",
        "outputId": "2b74437a-1334-4773-b399-82be2b97b90b"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
              "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
              "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
              "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
              "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
              "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
              "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
              "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
              "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
              "\n",
              "            Parch        Fare  \n",
              "count  891.000000  891.000000  \n",
              "mean     0.381594   32.204208  \n",
              "std      0.806057   49.693429  \n",
              "min      0.000000    0.000000  \n",
              "25%      0.000000    7.910400  \n",
              "50%      0.000000   14.454200  \n",
              "75%      0.000000   31.000000  \n",
              "max      6.000000  512.329200  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cd837233-5449-48c2-9339-67eb71a8fa8a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>14.526497</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd837233-5449-48c2-9339-67eb71a8fa8a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cd837233-5449-48c2-9339-67eb71a8fa8a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cd837233-5449-48c2-9339-67eb71a8fa8a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a07ef155-281d-4a4a-8351-f568f33961f1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a07ef155-281d-4a4a-8351-f568f33961f1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a07ef155-281d-4a4a-8351-f568f33961f1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"titanic_data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320.8159711429855,\n        \"min\": 1.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          446.0,\n          668.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.8713661874558,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3838383838383838,\n          1.0,\n          0.4865924542648575\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.2523437079694,\n        \"min\": 0.836071240977049,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          2.308641975308642,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242.9056731818781,\n        \"min\": 0.42,\n        \"max\": 714.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.69911764705882,\n          28.0,\n          714.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.4908277465442,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          0.5230078563411896,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.65971717879,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.38159371492704824,\n          6.0,\n          0.8060572211299483\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330.6256632228578,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.204207968574636,\n          14.4542,\n          891.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# number of labels\n",
        "titanic_data['Survived'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DAlJr6JR9gCx",
        "outputId": "65b04207-ddd3-4555-81d8-f352a4faa079"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Survived\n",
              "0    549\n",
              "1    342\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Handling the dataset"
      ],
      "metadata": {
        "id": "qTqT1j_T-zB5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#dropping the cabin data column as 687 values out of 891 are null\n",
        "titanic_data.drop('Cabin',axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "bltSjwAP9f8o"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# dropping the passenger id , name and ticket columns as they are also not as such needed\n",
        "titanic_data.drop(columns=['PassengerId','Name','Ticket'],axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "s2HqXfC89f5T"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# first 5 rows in the dataset\n",
        "titanic_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "pJtU6nlP_jPf",
        "outputId": "522e4ada-7702-444a-8d52-9dbbcd4f5b74"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n",
              "0         0       3    male  22.0      1      0   7.2500        S\n",
              "1         1       1  female  38.0      1      0  71.2833        C\n",
              "2         1       3  female  26.0      0      0   7.9250        S\n",
              "3         1       1  female  35.0      1      0  53.1000        S\n",
              "4         0       3    male  35.0      0      0   8.0500        S"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-483d5280-0c56-4b70-9096-dd3336ec5601\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-483d5280-0c56-4b70-9096-dd3336ec5601')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-483d5280-0c56-4b70-9096-dd3336ec5601 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-483d5280-0c56-4b70-9096-dd3336ec5601');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-26c0da59-fe13-4bfc-8f45-60d3dc4147e8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-26c0da59-fe13-4bfc-8f45-60d3dc4147e8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-26c0da59-fe13-4bfc-8f45-60d3dc4147e8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "titanic_data",
              "summary": "{\n  \"name\": \"titanic_data\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334042,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#count plot for Survived\n",
        "sns.countplot(x='Survived',data=titanic_data,hue='Survived')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "TF4UPQY7_y80",
        "outputId": "89de89c9-125b-42b5-c8b2-4139b1b8a0a9"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Survived', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#count plot for Pclass\n",
        "sns.countplot(x='Pclass',data=titanic_data,hue='Survived')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "DrOsR4TWAAqB",
        "outputId": "d79d7578-661d-4312-b873-4245a64f725d"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Pclass', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#count plot for Sex\n",
        "sns.countplot(x='Sex',data=titanic_data,hue='Survived')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "MxGJ4_9f_U8o",
        "outputId": "ccc27575-ad66-440f-95d0-b24e692ae107"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Sex', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# distribution plot for Age\n",
        "sns.displot(data=titanic_data, x = 'Age', kde=True,\n",
        "           hue='Survived', multiple='stack')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "euZr7tJ9_U6g",
        "outputId": "c8045c77-b1cb-478b-9526-af4400ef43e5"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f541238bd60>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 572.111x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#count plot for SibSp\n",
        "sns.countplot(x='SibSp',data=titanic_data,hue='Survived')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "tiXP1zxq_U3j",
        "outputId": "57b197f8-08dd-43d5-b4c2-083fc39539f8"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='SibSp', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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Dq+FsAMAANrck08+qVmzZun2229XfHy8Vq1apaCgIK1evbrDayHsAACANtXQ0KDS0lKlpKS4t/n4+CglJUUlJSUdXg9hBwAAtKl//vOfampqUmRkpMf2yMhIORyODq+HsAMAAEyNsAMAANpUt27d5Ovrq6qqKo/tVVVVstlsHV4PYQcAALQpf39/JSUlqaioyL2tublZRUVFstvtHV4P79kBAABtLicnR5mZmRo6dKiGDx+u5cuXq66uTrfffnuH10LYAQAAbW7atGk6duyYFi5cKIfDocGDB2vLli3nTFruCIQdAACuMq19o3FHy87OVnZ2ttFlMGcHAACYG2EHAACYGmEHAACYGmEHAACYGmEHAACYGmEHAACYGmEHAACYGmEHAACYGmEHAACYGmEHAACYGj8XAQDAVaZicUKHni924b7Lar9z5049/vjjKi0tVWVlpQoLCzVlypT2Ke4SGDqys3LlSiUmJspqtcpqtcput2vz5s3u/aNGjZLFYvFYfvnLX3r0UVFRoYkTJyooKEgRERGaO3euzpw509GXAgAA/r+6ujoNGjRI+fn5RpciyeCRnR49emjJkiW69tpr5XK5tHbtWk2ePFmffPKJBgwYIEmaNWuWFi9e7D4mKCjI/XdTU5MmTpwom82mXbt2qbKyUjNmzJCfn59++9vfdvj1AAAAKS0tTWlpaUaX4WZo2Jk0aZLH+qOPPqqVK1dq9+7d7rATFBQkm8123uO3bdumAwcO6K233lJkZKQGDx6shx9+WPPmzdODDz4of3//8x5XX1+v+vp697rT6WyjKwIAAN7GayYoNzU1af369aqrq5PdbndvX7dunbp166aBAwcqNzdXp06dcu8rKSlRQkKCIiMj3dtSU1PldDq1f//+Fs+Vl5en0NBQ9xITE9M+FwUAAAxn+ATlffv2yW636/Tp0woODlZhYaHi4+MlST//+c8VFxen6Oho7d27V/PmzdPBgwf117/+VZLkcDg8go4k97rD4WjxnLm5ucrJyXGvO51OAg8AACZleNjp27evysrKVFtbq1deeUWZmZkqLi5WfHy87rzzTne7hIQERUVFacyYMTp8+LB69+7d6nMGBAQoICCgLcoHAABezvDHWP7+/urTp4+SkpKUl5enQYMG6fe///152yYnJ0uSDh06JEmy2WyqqqryaHN2vaV5PgAA4LvF8LDz75qbmz0mD39bWVmZJCkqKkqSZLfbtW/fPlVXV7vbbN++XVar1f0oDAAAdKyTJ0+qrKzM/bldXl6usrIyVVRUGFKPoY+xcnNzlZaWptjYWJ04cUIFBQXasWOHtm7dqsOHD6ugoEATJkxQ165dtXfvXt1zzz0aOXKkEhMTJUnjxo1TfHy8br31Vi1dulQOh0Pz589XVlYWj6kAADDIRx99pBtvvNG9fnaebGZmptasWdPh9RgadqqrqzVjxgxVVlYqNDRUiYmJ2rp1q8aOHasjR47orbfe0vLly1VXV6eYmBilp6dr/vz57uN9fX21adMmzZ49W3a7XV26dFFmZqbHe3kAADCby32jcUcbNWqUXC6X0WW4GRp2nn/++Rb3xcTEqLi4+KJ9xMXF6c0332zLsgAAgIl43ZwdAACAtkTYAQAApkbYAQAApkbYAQDAC3jThF5v0hb3hbADAICBfH19JUkNDQ0GV+Kdzv4mpp+fX6v7MPznIgAA+C7r1KmTgoKCdOzYMfn5+cnHh3EI6ZsRnVOnTqm6ulphYWHuUNgahB0AAAxksVgUFRWl8vJy/f3vfze6HK8TFhZ2xT8BRdgBAMBg/v7+uvbaa3mU9W/8/PyuaETnLMIOAABewMfHR507dza6DFPiwSAAADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1wg4AADA1Q8POypUrlZiYKKvVKqvVKrvdrs2bN7v3nz59WllZWeratauCg4OVnp6uqqoqjz4qKio0ceJEBQUFKSIiQnPnztWZM2c6+lIAAICXMjTs9OjRQ0uWLFFpaak++ugjjR49WpMnT9b+/fslSffcc49ef/11vfzyyyouLtbRo0c1depU9/FNTU2aOHGiGhoatGvXLq1du1Zr1qzRwoULjbokAADgZSwul8tldBHfFh4erscff1w333yzunfvroKCAt18882SpC+++EL9+/dXSUmJRowYoc2bN+umm27S0aNHFRkZKUlatWqV5s2bp2PHjsnf3/+856ivr1d9fb173el0KiYmRrW1tbJaree0T5r7YjtcactKH5/RoecDAOBq5HQ6FRoa2uLn91leM2enqalJ69evV11dnex2u0pLS9XY2KiUlBR3m379+ik2NlYlJSWSpJKSEiUkJLiDjiSlpqbK6XS6R4fOJy8vT6Ghoe4lJiam/S4MAAAYyvCws2/fPgUHBysgIEC//OUvVVhYqPj4eDkcDvn7+yssLMyjfWRkpBwOhyTJ4XB4BJ2z+8/ua0lubq5qa2vdy5EjR9r2ogAAgNfoZHQBffv2VVlZmWpra/XKK68oMzNTxcXF7XrOgIAABQQEtOs5AACAdzA87Pj7+6tPnz6SpKSkJO3Zs0e///3vNW3aNDU0NKimpsZjdKeqqko2m02SZLPZ9OGHH3r0d/bbWmfbAACA7zbDH2P9u+bmZtXX1yspKUl+fn4qKipy7zt48KAqKipkt9slSXa7Xfv27VN1dbW7zfbt22W1WhUfH9/htQMAAO9j6MhObm6u0tLSFBsbqxMnTqigoEA7duzQ1q1bFRoaqpkzZyonJ0fh4eGyWq266667ZLfbNWLECEnSuHHjFB8fr1tvvVVLly6Vw+HQ/PnzlZWVxWMqAAAgyeCwU11drRkzZqiyslKhoaFKTEzU1q1bNXbsWEnSsmXL5OPjo/T0dNXX1ys1NVXPPPOM+3hfX19t2rRJs2fPlt1uV5cuXZSZmanFixcbdUkAAMDLeN17doxwse/p854dAAC8z1X3nh0AAID2QNgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmZmjYycvL07BhwxQSEqKIiAhNmTJFBw8e9GgzatQoWSwWj+WXv/ylR5uKigpNnDhRQUFBioiI0Ny5c3XmzJmOvBQAAOClOhl58uLiYmVlZWnYsGE6c+aMHnjgAY0bN04HDhxQly5d3O1mzZqlxYsXu9eDgoLcfzc1NWnixImy2WzatWuXKisrNWPGDPn5+em3v/1th14PAADwPoaGnS1btnisr1mzRhERESotLdXIkSPd24OCgmSz2c7bx7Zt23TgwAG99dZbioyM1ODBg/Xwww9r3rx5evDBB+Xv79+u1wAAALybV83Zqa2tlSSFh4d7bF+3bp26deumgQMHKjc3V6dOnXLvKykpUUJCgiIjI93bUlNT5XQ6tX///vOep76+Xk6n02MBAADmZOjIzrc1Nzdrzpw5uv766zVw4ED39p///OeKi4tTdHS09u7dq3nz5ungwYP661//KklyOBweQUeSe93hcJz3XHl5eXrooYfa6UoAAIA38Zqwk5WVpc8++0zvvfeex/Y777zT/XdCQoKioqI0ZswYHT58WL17927VuXJzc5WTk+NedzqdiomJaV3hAADAq3nFY6zs7Gxt2rRJ77zzjnr06HHBtsnJyZKkQ4cOSZJsNpuqqqo82pxdb2meT0BAgKxWq8cCAADMydCw43K5lJ2drcLCQr399tvq2bPnRY8pKyuTJEVFRUmS7Ha79u3bp+rqaneb7du3y2q1Kj4+vl3qBgAAVw9DH2NlZWWpoKBAr776qkJCQtxzbEJDQxUYGKjDhw+roKBAEyZMUNeuXbV3717dc889GjlypBITEyVJ48aNU3x8vG699VYtXbpUDodD8+fPV1ZWlgICAoy8PAAA4AUMHdlZuXKlamtrNWrUKEVFRbmXDRs2SJL8/f311ltvady4cerXr5/uvfdepaen6/XXX3f34evrq02bNsnX11d2u13/+Z//qRkzZni8lwcAAHx3GTqy43K5Lrg/JiZGxcXFF+0nLi5Ob775ZluVBQAATMQrJigDAAC0F8IOAAAwNcIOAAAwNcIOAAAwNcIOAAAwNcIOAAAwNcIOAAAwNcIOAAAwNcIOAAAwNcIOAAAwNcIOAAAwNcIOAAAwtVaFndGjR6umpuac7U6nU6NHj77SmgAAANpMq8LOjh071NDQcM7206dP6913373iogAAANpKp8tpvHfvXvffBw4ckMPhcK83NTVpy5Yt+t73vtd21QEAAFyhywo7gwcPlsVikcViOe/jqsDAQK1YsaLNigMAALhSlxV2ysvL5XK51KtXL3344Yfq3r27e5+/v78iIiLk6+vb5kUCAAC01mWFnbi4OElSc3NzuxQDAADQ1i4r7Hzbl19+qXfeeUfV1dXnhJ+FCxdecWEAAABtoVVh57nnntPs2bPVrVs32Ww2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3XDDDa67777b6DIMN23aNFdUVJTL39/f9b3vfc81bdo016FDh4wuyys4nU7X3Xff7YqNjXV17tzZ1atXL9d//dd/uerr640u7ZLwnh0AAGBqzNkBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBAACmRtgBcNWyWCzauHGjJOmrr76SxWJRWVmZoTUB8D6EHQBe69ixY5o9e7ZiY2MVEBAgm82m1NRUvf/++5KkyspKpaWlXVafhYWFGjFihEJDQxUSEqIBAwZozpw57VA9AG/BD4EC8Frp6elqaGjQ2rVr1atXL1VVVamoqEjHjx+XJNlstsvqr6ioSNOmTdOjjz6qn/zkJ7JYLDpw4IC2b9/eHuUD8BL8NhYAr1RTU6NrrrlGO3bs0A033HDeNhaLRYWFhZoyZYq++uor9ezZU3/+85/11FNP6eOPP1afPn2Un5/vPn7OnDn69NNP9c4777R43gcffFAbN27U7Nmz9cgjj+j48eO66aab9Nxzzyk0NLRdrhVA++IxFgCvFBwcrODgYG3cuFH19fWXfNzcuXN177336pNPPpHdbtekSZM8RoL279+vzz777IJ9HDp0SC+99JJef/11bdmyRZ988ol+9atfXdH1ADAOYQeAV+rUqZPWrFmjtWvXKiwsTNdff70eeOAB7d2794LHZWdnKz09Xf3799fKlSsVGhqq559/XpJ01113adiwYUpISND3v/99TZ8+XatXrz4nTJ0+fVovvviiBg8erJEjR2rFihVav369HA5Hu10vgPZD2AHgtdLT03X06FG99tprGj9+vHbs2KEhQ4ZozZo1LR5jt9vdf3fq1ElDhw7V559/Lknq0qWL3njjDR06dEjz589XcHCw7r33Xg0fPlynTp1yHxcbG6vvfe97Hn02Nzfr4MGDbX+RANodYQeAV+vcubPGjh2rBQsWaNeuXbrtttu0aNGiK+qzd+/e+sUvfqE//vGP+vjjj3XgwAFt2LChjSoG4G0IOwCuKvHx8aqrq2tx/+7du91/nzlzRqWlperfv3+L7b///e8rKCjIo8+KigodPXrUo08fHx/17dv3CqsHYAS+eg7AKx0/flw//elPdccddygxMVEhISH66KOPtHTpUk2ePLnF4/Lz83Xttdeqf//+WrZsmf71r3/pjjvukPTNN61OnTqlCRMmKC4uTjU1NXrqqafU2NiosWPHuvvo3LmzMjMz9cQTT8jpdOrXv/61fvazn132V90BeAfCDgCvFBwcrOTkZC1btkyHDx9WY2OjYmJiNGvWLD3wwAMtHrdkyRItWbJEZWVl6tOnj1577TV169ZNknTDDTcoPz9fM2bMUFVVla655hpdd9112rZtm8eoTZ8+fTR16lRNmDBBX3/9tW666SY988wz7X7NANoH79kBgG85+54dfnYCMA/m7AAAAFMj7AAAAFPjMRYAADA1RnYAAICpEXYAAICpEXYAAICpEXYAAICpEXYAAICpEXYAAICpEXYAAICpEXYAAICp/T8w++LKadnJ7AAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#count plot for Parch\n",
        "sns.countplot(x='Parch',data=titanic_data,hue='Survived')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "XY5py8zZ_U0z",
        "outputId": "7c8ec347-871a-4eb8-f9e0-76d22766eb29"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Parch', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# distribution plot for Fare\n",
        "sns.displot(data=titanic_data, x = 'Fare', kde=True,\n",
        "           hue='Survived', multiple='stack')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "EjCdLQb-Aw-x",
        "outputId": "54f82405-ca54-47c5-f4f9-b9e616ac7e2f"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f540db63f40>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 572.111x500 with 1 Axes>"
            ],
            "image/png": "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wsK0dOlSORyOM9rXI488oqeeekp5eXm64YYbNGrUKL355pst2rz55pv66U9/ety2ERERuuqqq457KvvNN9/Utddeq5CQEDmdTk2YMEHh4eH64osv9O9//1thYWGaOHGiGhsbJUl//vOftWDBAr366qtau3atKisrtWTJknafU7tuXT3//POtLn/iiSdUU1PT7mIAAEDb+Pn5acGCBZo+fbrmz5+vkSNH6tJLL9VNN92k9PT0Nu3rySef1BVXXOGZnzp1qv7yl7/o97//vSRpx44dysnJ0RtvvNHq9lOnTtUtt9yiuro6hYSEyG6364MPPvAElbfeektut1t///vfPQ8vvfbaa4qKitLq1as1fvx4vfDCC5o9e7auv/56Sc0vKf7444/bfF2OalePzon87Gc/4ztXAAB0silTpujgwYN67733NHHiRK1evVojR47UggUL2rSfUaNGtZi/6aabtGfPHn355ZeSmntnRo4cqaFDh7a6/eTJk+Xv76/33ntPkvR///d/ioiIUFZWliTp22+/VUFBgcLDwz09UdHR0WpoaNCuXbtUXV2toqIijRkzxrNPPz+/4+pqC68GnezsbAUFBXlzlwAA4DQEBQXpiiuu0GOPPaZ169bptttu0+OPPy6rtfmf+mPHuTidzlb3ERoa2mI+MTFRl19+ued21MKFCzV16tQT1hAQEKAbbrihRfsbb7zRM6i5pqZGGRkZ2rRpU4tpx44drd4O84Z23bo62p10lGEYKioq0saNG/XYY495pTAAANB+aWlpWrp0qeLi4iRJRUVFOu+88ySpxcDkU5k6daoeeugh3Xzzzfruu+900003nbL9FVdcoa1bt2rVqlX6wx/+4Fk3cuRIvfXWW4qPj1dERESr2/fs2VPr16/XJZdcIklqampSTk6ORo4cedo1H6tdPTqRkZEtpujoaF122WX68MMP9fjjj7erEAAA0HYVFRW6/PLL9cYbbyg3N1e7d+/W4sWL9cwzz+iaa65RcHCwLrjgAs8g4zVr1ujRRx897f1ff/31Onz4sO655x6NHTtWSUlJJ21/ySWXKDExUVOnTlW/fv1a3IaaOnWqYmNjdc011+iLL77Q7t27tXr1av3yl7/U/v37JUm/+tWv9NRTT2np0qXavn27fvGLX6iqqqpd10ZqZ4/Oa6+91u4DAgAA7wkLC9OYMWP0/PPPa9euXXI6nUpOTtb06dP1m9/8RpL06quv6s4771RGRoaGDBmiZ555RuPHjz+t/YeHh+vqq6/W22+/fVrjcC0Wi26++WY988wzmjNnTot1ISEh+vzzz/Xwww97AlSvXr00btw4Tw/PAw88oKKiIk2bNk1Wq1V33HGHrrvuOlVXV7fxyhypxziDh9NzcnKUl5cnSTrnnHM8XWLdjd1uV2RkpKqrq0/YldYeubm5+mf2HiX1H6qD323XLZl92zwCHgAAtF+7enRKS0t10003afXq1Z5vW1RVVWns2LFatGiR534gAACAL7VrjM69996rw4cPa+vWraqsrFRlZaW2bNkiu92uX/7yl96uEQAAoF3a1aOzfPlyffrpp0pNTfUsS0tL07x58077nh8AAEBHa1ePjtvtlr+//3HL/f395Xa7z7goAAAAb2hX0Ln88sv1q1/9SgcPHvQsO3DggO6//36NGzfOa8UBAACciXYFnb/85S+y2+3q27evBgwYoAEDBqhfv36y2+16+eWXvV0jAABAu7RrjE5ycrK+/vprffrpp57Pt6empnq+ZQEAANAVtKlHZ9WqVUpLS5PdbpfFYtEVV1yhe++9V/fee6/OP/98nXPOOfriiy86qlYAAIA2aVOPzgsvvKDp06e3+lK9yMhI/fznP9dzzz2niy+++LT29/nnn+vZZ59VTk6OioqKtGTJEl177bWe9bfddptef/31FttMmDBBy5cv98xXVlbq3nvv1fvvvy+r1aopU6boxRdfVFhYWFtODQAA0ygsLFR5eXmnHS82NlYpKSmddry2aFPQ+fbbb/X000+fcP348eP1pz/96bT3V1tbqxEjRuiOO+447kOhR02cOLHFJycCAwNbrJ86daqKioq0YsUKOZ1O3X777brrrrs8X04FAOBsUlhYqKGpqaqvq+u0YwaHhGh7Xl6XDDttCjolJSWtPlbu2Zmfn8rKyk57f5MmTdKkSZNO2iYwMFCJiYmtrsvLy9Py5cu1YcMGjRo1SpL08ssva/LkyfrTn/50yg+PAQBgNuXl5aqvq9PUh59VQsqADj9eSeEuvfn0gyovL29z0Jk3b56effZZFRcXa8SIEXr55Zc1evRor9bXpqDTq1cvbdmyRQMHDmx1fW5urnr27OmVwo5avXq14uPj1aNHD11++eX6wx/+oJiYGElSdna2oqKiPCFH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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#count plot for Embarked\n",
        "sns.countplot(x='Embarked',data=titanic_data,hue='Survived')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "ulEG6J9x_UyK",
        "outputId": "2ad04cc6-7613-46b0-a90b-29ad4c365d4d"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Embarked', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking null values grphhically\n",
        "sns.heatmap(titanic_data.isnull(), cmap = 'viridis', cbar=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "gEa_RrDv_Uvb",
        "outputId": "3b9b9408-d2ea-43fd-907d-dfd658ba15c6"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plotting the age\n",
        "ax = titanic_data['Age'].hist(bins=30, color='teal', grid=False,\n",
        "                        alpha=0.8, density=True)\n",
        "titanic_data['Age'].plot(kind='density')\n",
        "ax.set_xlabel('Age')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "raRkFsfnCkpH",
        "outputId": "688b8fcd-17aa-432c-fcde-2565fede357a"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# checking to handle missing values\n",
        "sns.displot(data=titanic_data, x = 'Age', kde=True, bins=20,\n",
        "           hue='Survived', multiple='stack', col='Sex')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 525
        },
        "id": "7WHC-an-Ckmh",
        "outputId": "5d1fe265-6594-4558-b620-f9245b3593db"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f540d94f6d0>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1072.11x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking the values for survived ppl\n",
        "titanic_data[titanic_data['Survived']==1]['Sex'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mf81bvrKCkj2",
        "outputId": "bc654983-32c6-4d96-ea33-8975c4636212"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Sex\n",
              "female    233\n",
              "male      109\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# graphically understanding the embarked and exploring facegrid\n",
        "f = sns.FacetGrid(titanic_data, row='Embarked', height=3,\n",
        "                  aspect=3)\n",
        "f.map(sns.pointplot, 'Pclass', 'Survived', 'Sex',\n",
        "      order = None, hue_order=None)\n",
        "f.add_legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "aKeWU1lWCkhB",
        "outputId": "095dd4dd-49d7-45d8-c737-ace4a391eaef"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/seaborn/axisgrid.py:854: FutureWarning: \n",
            "\n",
            "Setting a gradient palette using color= is deprecated and will be removed in v0.14.0. Set `palette='dark:#1f77b4'` for the same effect.\n",
            "\n",
            "  func(*plot_args, **plot_kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/seaborn/axisgrid.py:854: FutureWarning: \n",
            "\n",
            "Setting a gradient palette using color= is deprecated and will be removed in v0.14.0. Set `palette='dark:#1f77b4'` for the same effect.\n",
            "\n",
            "  func(*plot_args, **plot_kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/seaborn/axisgrid.py:854: FutureWarning: \n",
            "\n",
            "Setting a gradient palette using color= is deprecated and will be removed in v0.14.0. Set `palette='dark:#1f77b4'` for the same effect.\n",
            "\n",
            "  func(*plot_args, **plot_kwargs)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f540d6efdf0>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 998x900 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# pairplot for the dataset\n",
        "sns.pairplot(titanic_data, hue='Survived')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wwhLvN3hCkd-",
        "outputId": "d346a7aa-a2e8-4b28-ae41-a1a908930a4b"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7f540d1f40d0>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1322.11x1250 with 30 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#getting the values for embarked\n",
        "titanic_data['Embarked'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k_VqK-E1PaE6",
        "outputId": "56ff65a5-3c22-41d5-fdb2-15eef75052ee"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Embarked\n",
              "S    644\n",
              "C    168\n",
              "Q     77\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#replacing the missing value in Emabrked\n",
        "titanic_data['Embarked'].fillna('S', inplace=True)"
      ],
      "metadata": {
        "id": "gmHYsWJnPaBl"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# converting the category columns to string data type\n",
        "cat_cols = ['Pclass', 'Sex', 'Embarked']\n",
        "titanic_data[cat_cols] = titanic_data[cat_cols].astype('str')"
      ],
      "metadata": {
        "id": "HQ8kQklOE48Q"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# plotting the count & distribution plot through subplots\n",
        "columns = titanic_data.columns[:-1]\n",
        "plt.figure(figsize=(20,10))\n",
        "for i, col in enumerate(columns):\n",
        "    plt.subplot(4,4, i+1)\n",
        "    sns.histplot(x=col, data=titanic_data, hue='Survived', multiple='stack', kde=True)\n",
        "    plt.xlabel(col)\n",
        "    plt.title(\"{} vs taget\".format(col))\n",
        "    plt.tight_layout()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "id": "yHhf4fwdCkYU",
        "outputId": "6c5ec04e-6623-4363-ff84-89dde67e3839"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 7 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Preprocessing & Splitting"
      ],
      "metadata": {
        "id": "d_GJrrLTF_-r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Missing values handling"
      ],
      "metadata": {
        "id": "bq-TTCX2GF50"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# checking null values\n",
        "titanic_data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eZO9pIsVFqEV",
        "outputId": "305a65b8-5b87-493e-883f-8c5b54c2e613"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Survived      0\n",
              "Pclass        0\n",
              "Sex           0\n",
              "Age         177\n",
              "SibSp         0\n",
              "Parch         0\n",
              "Fare          0\n",
              "Embarked      0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting info about the dataset\n",
        "titanic_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8hs5b-e_FqBS",
        "outputId": "0d457d14-1681-4a79-d7b5-0af857fe621c"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 8 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   Survived  891 non-null    int64  \n",
            " 1   Pclass    891 non-null    object \n",
            " 2   Sex       891 non-null    object \n",
            " 3   Age       714 non-null    float64\n",
            " 4   SibSp     891 non-null    int64  \n",
            " 5   Parch     891 non-null    int64  \n",
            " 6   Fare      891 non-null    float64\n",
            " 7   Embarked  891 non-null    object \n",
            "dtypes: float64(2), int64(3), object(3)\n",
            "memory usage: 55.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# function for imputing the missing age\n",
        "def impute_age(Pclass, Sex):\n",
        "    if Sex=='male':\n",
        "        if Pclass=='1':\n",
        "            return titanic_data[(titanic_data['Pclass']=='1')&(titanic_data['Sex']=='male')]['Age'].mean()\n",
        "        elif Pclass=='2':\n",
        "            return titanic_data[(titanic_data['Pclass']=='2')&(titanic_data['Sex']=='male')]['Age'].mean()\n",
        "        elif Pclass=='3':\n",
        "            return titanic_data[(titanic_data['Pclass']=='3')&(titanic_data['Sex']=='male')]['Age'].mean()\n",
        "\n",
        "    else:\n",
        "        if Pclass=='1':\n",
        "            return titanic_data[(titanic_data['Pclass']=='1')&(titanic_data['Sex']!='male')]['Age'].mean()\n",
        "        elif Pclass=='2':\n",
        "            return titanic_data[(titanic_data['Pclass']=='2')&(titanic_data['Sex']!='male')]['Age'].mean()\n",
        "        elif Pclass=='3':\n",
        "            return titanic_data[(titanic_data['Pclass']=='3')&(titanic_data['Sex']!='male')]['Age'].mean()"
      ],
      "metadata": {
        "id": "TQPTZOzcFp9n"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# replacing the missing values\n",
        "titanic_data['Age'] = titanic_data.apply(lambda x: impute_age(x['Pclass'], x['Sex']) if np.isnan(x['Age']) else x['Age'], axis=1)"
      ],
      "metadata": {
        "id": "kuGu37R6Fp6g"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# checking null values\n",
        "titanic_data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TFxCWwWSFp3n",
        "outputId": "1c4b40a9-2230-4ddd-d521-3fdf446c662a"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Survived    0\n",
              "Pclass      0\n",
              "Sex         0\n",
              "Age         0\n",
              "SibSp       0\n",
              "Parch       0\n",
              "Fare        0\n",
              "Embarked    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Splitting the Data"
      ],
      "metadata": {
        "id": "-VbdgiXLNTx2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# seperating the data and labels\n",
        "X = titanic_data.drop(columns = 'Survived', axis = 1)\n",
        "y = titanic_data['Survived']"
      ],
      "metadata": {
        "id": "tU6uwhMbNBh-"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#importing the train_test_split to split the data\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "vf0njSDMNBfM"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# spliting the data in training & testing data\n",
        "X_train , X_test , y_train , y_test = train_test_split(X,y,test_size = 0.2,random_state=42, stratify=y)"
      ],
      "metadata": {
        "id": "vNzfEMeXNBcD"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X.shape, X_train.shape , X_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9RCZ0-EQNBY8",
        "outputId": "d0c5d4a8-f4bd-4b28-955c-9b3edf3f85ee"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(891, 7) (712, 7) (179, 7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# saving the all columns of training data\n",
        "all_columns = X_train.columns"
      ],
      "metadata": {
        "id": "lApaGo9zNBVt"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "One Hot Encoding"
      ],
      "metadata": {
        "id": "J_zF-K2FNl5k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#importing OneHotEncoder for preprocessing\n",
        "from sklearn.preprocessing import OneHotEncoder"
      ],
      "metadata": {
        "id": "TQXBahxNNBSm"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#loading the OneHotEncoder\n",
        "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')"
      ],
      "metadata": {
        "id": "LXwpMO16NBPq"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#fitting the categorical columns to encoder\n",
        "X_train_encoded = encoder.fit_transform(X_train[cat_cols])"
      ],
      "metadata": {
        "id": "GWlmTE59NBMT"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#storing the encoding columns\n",
        "encoded_columns = encoder.get_feature_names_out(cat_cols)"
      ],
      "metadata": {
        "id": "VXioS6LwNq4K"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a DataFrame with the encoded features\n",
        "X_train_encoded_df = pd.DataFrame(X_train_encoded, columns=encoded_columns)"
      ],
      "metadata": {
        "id": "bVzONb_ONq15"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Add the remaining non-categorical columns\n",
        "X_train_final_encoded = pd.concat([X_train.drop(cat_cols, axis=1).reset_index(drop=True), X_train_encoded_df], axis=1)"
      ],
      "metadata": {
        "id": "GRluUDCwNqw-"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_final_encoded.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Vr_stOyPNqum",
        "outputId": "e0e63f43-8cc2-4fba-dadb-ec9b405739fd"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Age  SibSp  Parch      Fare  Pclass_1  Pclass_2  Pclass_3  \\\n",
              "0  26.507589      0      0   56.4958       0.0       0.0       1.0   \n",
              "1  30.740707      0      0    0.0000       0.0       1.0       0.0   \n",
              "2  41.281386      0      0  221.7792       1.0       0.0       0.0   \n",
              "3  18.000000      0      1    9.3500       0.0       0.0       1.0   \n",
              "4  31.000000      1      1   26.2500       0.0       1.0       0.0   \n",
              "\n",
              "   Sex_female  Sex_male  Embarked_C  Embarked_Q  Embarked_S  \n",
              "0         0.0       1.0         0.0         0.0         1.0  \n",
              "1         0.0       1.0         0.0         0.0         1.0  \n",
              "2         0.0       1.0         0.0         0.0         1.0  \n",
              "3         1.0       0.0         0.0         0.0         1.0  \n",
              "4         1.0       0.0         0.0         0.0         1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-792ba5fa-6944-45c3-a3dc-ce99fdc8f03e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Pclass_1</th>\n",
              "      <th>Pclass_2</th>\n",
              "      <th>Pclass_3</th>\n",
              "      <th>Sex_female</th>\n",
              "      <th>Sex_male</th>\n",
              "      <th>Embarked_C</th>\n",
              "      <th>Embarked_Q</th>\n",
              "      <th>Embarked_S</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>26.507589</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>56.4958</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>30.740707</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>41.281386</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>221.7792</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.3500</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>31.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>26.2500</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-792ba5fa-6944-45c3-a3dc-ce99fdc8f03e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-792ba5fa-6944-45c3-a3dc-ce99fdc8f03e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-792ba5fa-6944-45c3-a3dc-ce99fdc8f03e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ff6652ea-8e4e-43a0-849a-867d777b383c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff6652ea-8e4e-43a0-849a-867d777b383c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ff6652ea-8e4e-43a0-849a-867d777b383c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_train_final_encoded",
              "summary": "{\n  \"name\": \"X_train_final_encoded\",\n  \"rows\": 712,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.29418036270775,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          3.0,\n          28.0,\n          12.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.05910427661551,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 226,\n        \"samples\": [\n          35.5,\n          26.2875,\n          164.8667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.427485994334332,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4080740611549263,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49792748298831707,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47895179603696797,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47895179603696797,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.39665224248664205,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2671709485414906,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.44554435713482754,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking is there any loss of data\n",
        "X_train_final_encoded.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0C1xhilSNwKF",
        "outputId": "c181adc7-8e18-4bdb-eaf2-ec8713af7e84"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age           0\n",
              "SibSp         0\n",
              "Parch         0\n",
              "Fare          0\n",
              "Pclass_1      0\n",
              "Pclass_2      0\n",
              "Pclass_3      0\n",
              "Sex_female    0\n",
              "Sex_male      0\n",
              "Embarked_C    0\n",
              "Embarked_Q    0\n",
              "Embarked_S    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Standardizing the Data"
      ],
      "metadata": {
        "id": "vFsZDs2JN37f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the Standard Scaler to standardize the data\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "KgBEpvlONwEa"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# saving the all columns of training data\n",
        "training_columns = X_train_final_encoded.columns"
      ],
      "metadata": {
        "id": "7ORtByEENwBr"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#scaling the training data\n",
        "scaler = StandardScaler()\n",
        "X_train_encoded = scaler.fit_transform(X_train_final_encoded)"
      ],
      "metadata": {
        "id": "34nBvhrHN6fc"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a DataFrame with the encoded features\n",
        "X_train_encoded_scaled = pd.DataFrame(X_train_encoded, columns=training_columns)"
      ],
      "metadata": {
        "id": "03UjB1HvN6cY"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_encoded_scaled.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "YhPHHHn-N6Zm",
        "outputId": "7db0bf6c-e2dd-4519-dc3e-b236afb7ad91"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Age     SibSp     Parch      Fare  Pclass_1  Pclass_2  Pclass_3  \\\n",
              "0 -0.224306 -0.465084 -0.466183  0.513812 -0.562211 -0.516627  0.906075   \n",
              "1  0.094336 -0.465084 -0.466183 -0.662563 -0.562211  1.935631 -1.103661   \n",
              "2  0.887773 -0.465084 -0.466183  3.955399  1.778691 -0.516627 -1.103661   \n",
              "3 -0.864705 -0.465084  0.727782 -0.467874 -0.562211 -0.516627  0.906075   \n",
              "4  0.113854  0.478335  0.727782 -0.115977 -0.562211  1.935631 -1.103661   \n",
              "\n",
              "   Sex_female  Sex_male  Embarked_C  Embarked_Q  Embarked_S  \n",
              "0   -0.742427  0.742427   -0.492527   -0.289333    0.611978  \n",
              "1   -0.742427  0.742427   -0.492527   -0.289333    0.611978  \n",
              "2   -0.742427  0.742427   -0.492527   -0.289333    0.611978  \n",
              "3    1.346933 -1.346933   -0.492527   -0.289333    0.611978  \n",
              "4    1.346933 -1.346933   -0.492527   -0.289333    0.611978  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2e0ce077-e3c7-41a5-a9a1-8e4ec0191a16\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Pclass_1</th>\n",
              "      <th>Pclass_2</th>\n",
              "      <th>Pclass_3</th>\n",
              "      <th>Sex_female</th>\n",
              "      <th>Sex_male</th>\n",
              "      <th>Embarked_C</th>\n",
              "      <th>Embarked_Q</th>\n",
              "      <th>Embarked_S</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.224306</td>\n",
              "      <td>-0.465084</td>\n",
              "      <td>-0.466183</td>\n",
              "      <td>0.513812</td>\n",
              "      <td>-0.562211</td>\n",
              "      <td>-0.516627</td>\n",
              "      <td>0.906075</td>\n",
              "      <td>-0.742427</td>\n",
              "      <td>0.742427</td>\n",
              "      <td>-0.492527</td>\n",
              "      <td>-0.289333</td>\n",
              "      <td>0.611978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.094336</td>\n",
              "      <td>-0.465084</td>\n",
              "      <td>-0.466183</td>\n",
              "      <td>-0.662563</td>\n",
              "      <td>-0.562211</td>\n",
              "      <td>1.935631</td>\n",
              "      <td>-1.103661</td>\n",
              "      <td>-0.742427</td>\n",
              "      <td>0.742427</td>\n",
              "      <td>-0.492527</td>\n",
              "      <td>-0.289333</td>\n",
              "      <td>0.611978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.887773</td>\n",
              "      <td>-0.465084</td>\n",
              "      <td>-0.466183</td>\n",
              "      <td>3.955399</td>\n",
              "      <td>1.778691</td>\n",
              "      <td>-0.516627</td>\n",
              "      <td>-1.103661</td>\n",
              "      <td>-0.742427</td>\n",
              "      <td>0.742427</td>\n",
              "      <td>-0.492527</td>\n",
              "      <td>-0.289333</td>\n",
              "      <td>0.611978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.864705</td>\n",
              "      <td>-0.465084</td>\n",
              "      <td>0.727782</td>\n",
              "      <td>-0.467874</td>\n",
              "      <td>-0.562211</td>\n",
              "      <td>-0.516627</td>\n",
              "      <td>0.906075</td>\n",
              "      <td>1.346933</td>\n",
              "      <td>-1.346933</td>\n",
              "      <td>-0.492527</td>\n",
              "      <td>-0.289333</td>\n",
              "      <td>0.611978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.113854</td>\n",
              "      <td>0.478335</td>\n",
              "      <td>0.727782</td>\n",
              "      <td>-0.115977</td>\n",
              "      <td>-0.562211</td>\n",
              "      <td>1.935631</td>\n",
              "      <td>-1.103661</td>\n",
              "      <td>1.346933</td>\n",
              "      <td>-1.346933</td>\n",
              "      <td>-0.492527</td>\n",
              "      <td>-0.289333</td>\n",
              "      <td>0.611978</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e0ce077-e3c7-41a5-a9a1-8e4ec0191a16')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2e0ce077-e3c7-41a5-a9a1-8e4ec0191a16 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2e0ce077-e3c7-41a5-a9a1-8e4ec0191a16');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9fd2ef4d-43dc-4275-afbb-b8023c3b9140\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9fd2ef4d-43dc-4275-afbb-b8023c3b9140')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9fd2ef4d-43dc-4275-afbb-b8023c3b9140 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_train_encoded_scaled",
              "summary": "{\n  \"name\": \"X_train_encoded_scaled\",\n  \"rows\": 712,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845375,\n        \"min\": -2.1880173807654213,\n        \"max\": 3.8022687139895983,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          -1.9938110710837431,\n          -0.1119669850209698,\n          -1.3163472001011447\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845375,\n        \"min\": -0.46508427634374117,\n        \"max\": 7.082266259422497,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -0.46508427634374117,\n          0.4783345406270387,\n          1.4217533575978185\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845373,\n        \"min\": -0.46618317148792077,\n        \"max\": 6.697610024901998,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -0.46618317148792077,\n          0.7277823612437324,\n          4.309678959438692\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845375,\n        \"min\": -0.6625632269369692,\n        \"max\": 10.005329337567716,\n        \"num_unique_values\": 226,\n        \"samples\": [\n          0.07662982713825477,\n          -0.1151959759791537,\n          2.7703471811842633\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845375,\n        \"min\": -0.5622111088094591,\n        \"max\": 1.7786912857655988,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.7786912857655988,\n          -0.5622111088094591\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845375,\n        \"min\": -0.516627442738718,\n        \"max\": 1.935630818794397,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.935630818794397,\n          -0.516627442738718\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845375,\n        \"min\": -1.103661422640814,\n        \"max\": 0.9060749786897732,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -1.103661422640814,\n          0.9060749786897732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845375,\n        \"min\": -0.7424272739336898,\n        \"max\": 1.3469332756346388,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.3469332756346388,\n          -0.7424272739336898\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845375,\n        \"min\": -1.3469332756346388,\n        \"max\": 0.7424272739336898,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -1.3469332756346388,\n          0.7424272739336898\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845377,\n        \"min\": -0.4925270520825824,\n        \"max\": 2.0303453298080556,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.0303453298080556,\n          -0.4925270520825824\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845375,\n        \"min\": -0.2893334595879614,\n        \"max\": 3.456219689987103,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3.456219689987103,\n          -0.2893334595879614\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007029877845375,\n        \"min\": -1.6340450094117678,\n        \"max\": 0.611978246768114,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -1.6340450094117678,\n          0.611978246768114\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking the number of rows and columns\n",
        "X_train_encoded_scaled.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LSdlTOTWN6V5",
        "outputId": "f88c264d-4338-4cc8-f5e9-a6ec7b7ad5e0"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(712, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Selection\n"
      ],
      "metadata": {
        "id": "Up7T_DyROJTC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Comparing the models with default hyperparameter values using Cross Validation"
      ],
      "metadata": {
        "id": "5LYxUV2fOMnN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the standard classification models from sklearn library\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from xgboost import XGBClassifier"
      ],
      "metadata": {
        "id": "mfD4L4-SN6TB"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# all models in a dictionary\n",
        "models = {\n",
        "    'Logistic Regression': LogisticRegression(),\n",
        "    'KNN': KNeighborsClassifier(),\n",
        "    'Random Forest': RandomForestClassifier(),\n",
        "    'SVM': SVC(kernel='linear'),\n",
        "    'XGBoost': XGBClassifier()\n",
        "}"
      ],
      "metadata": {
        "id": "sQTSlabIOEuZ"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# importing cross validation score function to calculate the cross validation score\n",
        "from sklearn.model_selection import cross_val_score"
      ],
      "metadata": {
        "id": "IaA_OFOdOEry"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# defining a function who can give you cross validation scores on given data with given set of model\n",
        "def compare_models_cross_validation(models,X,y):\n",
        "  for name, model in models.items():\n",
        "    cv_score = cross_val_score(model, X, y, cv=5)\n",
        "    mean_accuracy = cv_score.mean() * 100\n",
        "    print(f\"Model: {name}\")\n",
        "    print('Cross Validation accuracies for the',model,'=', cv_score)\n",
        "    print('Acccuracy score of the ',model,'=',mean_accuracy,'%')\n",
        "    print(\"=\"*50)"
      ],
      "metadata": {
        "id": "kBzK2tGfOEoi"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# calling the compare function for the models we choose\n",
        "compare_models_cross_validation(models,X_train_encoded_scaled,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L0TtSgiwOElo",
        "outputId": "1b3f11fb-cb6e-469d-d193-563429d5f871"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: Logistic Regression\n",
            "Cross Validation accuracies for the LogisticRegression() = [0.7972028  0.74825175 0.81690141 0.80985915 0.81690141]\n",
            "Acccuracy score of the  LogisticRegression() = 79.78233034571063 %\n",
            "==================================================\n",
            "Model: KNN\n",
            "Cross Validation accuracies for the KNeighborsClassifier() = [0.77622378 0.77622378 0.85915493 0.80985915 0.78873239]\n",
            "Acccuracy score of the  KNeighborsClassifier() = 80.20388062641585 %\n",
            "==================================================\n",
            "Model: Random Forest\n",
            "Cross Validation accuracies for the RandomForestClassifier() = [0.76923077 0.6993007  0.82394366 0.83802817 0.77464789]\n",
            "Acccuracy score of the  RandomForestClassifier() = 78.10302373682654 %\n",
            "==================================================\n",
            "Model: SVM\n",
            "Cross Validation accuracies for the SVC(kernel='linear') = [0.79020979 0.76223776 0.79577465 0.80985915 0.78873239]\n",
            "Acccuracy score of the  SVC(kernel='linear') = 78.93627499261302 %\n",
            "==================================================\n",
            "Model: XGBoost\n",
            "Cross Validation accuracies for the XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
            "              colsample_bylevel=None, colsample_bynode=None,\n",
            "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
            "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
            "              gamma=None, grow_policy=None, importance_type=None,\n",
            "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
            "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
            "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
            "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
            "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
            "              num_parallel_tree=None, random_state=None, ...) = [0.7972028  0.71328671 0.8028169  0.83098592 0.85211268]\n",
            "Acccuracy score of the  XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
            "              colsample_bylevel=None, colsample_bynode=None,\n",
            "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
            "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
            "              gamma=None, grow_policy=None, importance_type=None,\n",
            "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
            "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
            "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
            "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
            "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
            "              num_parallel_tree=None, random_state=None, ...) = 79.92810006894514 %\n",
            "==================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "Top 3:\n",
        "\n",
        "KNeighborsClassifier() = 80.20388062641585 %\n",
        "\n",
        "XGBClassifier() = 79.92810006894514 %\n",
        "\n",
        "LogisticRegression() = 79.78233034571063 %"
      ],
      "metadata": {
        "id": "ZRZIgK9IOXMh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Function for Feature Selection"
      ],
      "metadata": {
        "id": "BIh5TI8cOjHp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#importing the RFE\n",
        "from sklearn.feature_selection import RFE"
      ],
      "metadata": {
        "id": "xnrW537tORul"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# defining a function who will give you n best features for the given model and data\n",
        "def find_best_feature(n,mdl,X,y):\n",
        "    model = mdl\n",
        "    rfe = RFE(model, n_features_to_select=n, verbose=0)\n",
        "    rfe = rfe.fit(X, y)\n",
        "    selected_col = X.columns[rfe.support_]\n",
        "    cv_score = cross_val_score(model,X[selected_col],y, cv=5)\n",
        "    mean_accuracy = cv_score.mean() * 100\n",
        "    print(\"Selected columns: \", list(selected_col))\n",
        "    print(n, mean_accuracy)\n",
        "    print(\"----------------------\\n\")\n",
        "    return list(selected_col),mean_accuracy"
      ],
      "metadata": {
        "id": "J2re63JFORr0"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#importing the SelectKBest, f_classif\n",
        "from sklearn.feature_selection import SelectKBest, f_classif"
      ],
      "metadata": {
        "id": "D-cVXQS0XINZ"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# defining a function who will give you n best features for the knn model and data\n",
        "def find_best_feature_knn(n, mdl, X, y):\n",
        "    selector = SelectKBest(f_classif, k=n)\n",
        "    X_new = selector.fit_transform(X, y)\n",
        "    selected_col = X.columns[selector.get_support()]\n",
        "    cv_score = cross_val_score(mdl, X_new, y, cv=5)\n",
        "    mean_accuracy = cv_score.mean() * 100\n",
        "    print(\"Selected columns: \", list(selected_col))\n",
        "    print(n, mean_accuracy)\n",
        "    print(\"----------------------\\n\")\n",
        "    return list(selected_col), mean_accuracy"
      ],
      "metadata": {
        "id": "02bnWtN6XIKS"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wg99v_lzXZ-E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. K Neighbors Classifier"
      ],
      "metadata": {
        "id": "kRPaVszCjP0P"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "K Neighbors Classifier as the highest accuracy based on cross validation score according to its default hyperparameters\n",
        "\n",
        "KNeighborsClassifier() = 80.20388062641585 %"
      ],
      "metadata": {
        "id": "E7aRKqtSbviz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the K Neighbors Classifier\n",
        "knn = KNeighborsClassifier(n_neighbors=5)"
      ],
      "metadata": {
        "id": "4DH_uNbwjFwF"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the best features of KNeighbors Classifier by calling the feature selection function\n",
        "best_score_knn = 0\n",
        "best_features_knn = None\n",
        "for i in range(X_train_encoded_scaled.shape[1]):\n",
        "    col , score = find_best_feature_knn(i+1,knn,X_train_encoded_scaled,y_train)\n",
        "    if best_score_knn < score:\n",
        "        best_score_knn = score\n",
        "        best_features_knn = col\n",
        "print(best_features_knn)\n",
        "print(best_score_knn)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EFg_g6skjFre",
        "outputId": "caabb012-3823-4390-e32a-1e79aa70fb0f"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Selected columns:  ['Sex_male']\n",
            "1 58.679208115827834\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Sex_female', 'Sex_male']\n",
            "2 78.93627499261302\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Pclass_3', 'Sex_female', 'Sex_male']\n",
            "3 76.00019698611248\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']\n",
            "4 73.06313404904954\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']\n",
            "5 80.9110607702157\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_C']\n",
            "6 80.06500541711809\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_S']\n",
            "7 80.20585048754063\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Parch', 'Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_S']\n",
            "8 78.52260415640698\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'Parch', 'Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_S']\n",
            "9 79.783315276273\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'Parch', 'Fare', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_S']\n",
            "10 79.783315276273\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'Parch', 'Fare', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S']\n",
            "11 79.64247020585049\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Parch', 'Fare', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S']\n",
            "12 80.20388062641585\n",
            "----------------------\n",
            "\n",
            "['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']\n",
            "80.9110607702157\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Best Features : ['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']"
      ],
      "metadata": {
        "id": "s85uPfrajo1X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# using a diffferent df to store\n",
        "X_train_best_features_knn = X_train_encoded_scaled[best_features_knn]"
      ],
      "metadata": {
        "id": "vKCxufo3jFom"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the cross val score of knn with its best features\n",
        "cv_score_knn = cross_val_score(knn, X_train_best_features_knn, y_train, cv=5)\n",
        "print(cv_score_knn)\n",
        "print(cv_score_knn.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JWL706rFjmQj",
        "outputId": "5697822b-5f9f-4a9c-8473-f0cc4dff6b19"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.79020979 0.74125874 0.83098592 0.83802817 0.84507042]\n",
            "0.8091106077021569\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the default model with its best features\n",
        "knn.fit(X_train_best_features_knn,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "z_Mcro2XjmNN",
        "outputId": "386280be-adb8-4bd0-f5f7-c86daa145a24"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Test Data Preprocessing"
      ],
      "metadata": {
        "id": "LvdJng8CYVMu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#fitting the categorical columns to encoder\n",
        "X_test_encoded = encoder.transform(X_test[cat_cols])"
      ],
      "metadata": {
        "id": "kAnVZ_eeYIq3"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a DataFrame with the encoded features\n",
        "X_test_encoded_df = pd.DataFrame(X_test_encoded, columns=encoded_columns)"
      ],
      "metadata": {
        "id": "gUGK9YJFYIrB"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Add the remaining non-categorical columns\n",
        "X_test_final_encoded = pd.concat([X_test.drop(cat_cols, axis=1).reset_index(drop=True), X_test_encoded_df], axis=1)"
      ],
      "metadata": {
        "id": "evmW6CEyYIrB"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test_final_encoded.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "632e1ece-6174-4cc7-ed9b-5df0e61bae20",
        "id": "UTuG6JA4YIrB"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Age  SibSp  Parch     Fare  Pclass_1  Pclass_2  Pclass_3  Sex_female  \\\n",
              "0  24.00      2      0  24.1500       0.0       0.0       1.0         0.0   \n",
              "1  44.00      0      1  16.1000       0.0       0.0       1.0         0.0   \n",
              "2  22.00      0      0   7.2250       0.0       0.0       1.0         0.0   \n",
              "3  41.00      2      0  14.1083       0.0       0.0       1.0         0.0   \n",
              "4  21.75      1      0  15.5000       0.0       0.0       1.0         1.0   \n",
              "\n",
              "   Sex_male  Embarked_C  Embarked_Q  Embarked_S  \n",
              "0       1.0         0.0         0.0         1.0  \n",
              "1       1.0         0.0         0.0         1.0  \n",
              "2       1.0         1.0         0.0         0.0  \n",
              "3       1.0         0.0         0.0         1.0  \n",
              "4       0.0         0.0         1.0         0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-128fc119-348b-4387-b28e-58a8238c148b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Pclass_1</th>\n",
              "      <th>Pclass_2</th>\n",
              "      <th>Pclass_3</th>\n",
              "      <th>Sex_female</th>\n",
              "      <th>Sex_male</th>\n",
              "      <th>Embarked_C</th>\n",
              "      <th>Embarked_Q</th>\n",
              "      <th>Embarked_S</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24.00</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>24.1500</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>44.00</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>16.1000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>22.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.2250</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>41.00</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>14.1083</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>21.75</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>15.5000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-128fc119-348b-4387-b28e-58a8238c148b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-128fc119-348b-4387-b28e-58a8238c148b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-128fc119-348b-4387-b28e-58a8238c148b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-147b5ac5-de70-4334-9eae-b865e3e9edd4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-147b5ac5-de70-4334-9eae-b865e3e9edd4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-147b5ac5-de70-4334-9eae-b865e3e9edd4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_test_final_encoded",
              "summary": "{\n  \"name\": \"X_test_final_encoded\",\n  \"rows\": 179,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.244733243716345,\n        \"min\": 0.75,\n        \"max\": 70.0,\n        \"num_unique_values\": 59,\n        \"samples\": [\n          24.0,\n          36.0,\n          63.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2,\n          0,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.843604381275206,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          11.1333,\n          113.275,\n          7.7875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4350329371360238,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3933570542679563,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4979400160858832,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47530174036891054,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47530174036891054,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.36949461367844044,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.32924914054194826,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.45264065256451147,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#scaling the training data\n",
        "X_test_scaled = scaler.transform(X_test_final_encoded)"
      ],
      "metadata": {
        "id": "jjFWb_fHYPUr"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test_encoded_scaled = pd.DataFrame(X_test_scaled, columns=training_columns)"
      ],
      "metadata": {
        "id": "Aco_2ueBYPU0"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test_encoded_scaled.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "a61584d5-0bf8-4b4f-904d-9a8e07d5e75a",
        "id": "IoYMtFUUYPU0"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Age     SibSp     Parch      Fare  Pclass_1  Pclass_2  Pclass_3  \\\n",
              "0 -0.413062  1.421753 -0.466183 -0.159704 -0.562211 -0.516627  0.906075   \n",
              "1  1.092413 -0.465084  0.727782 -0.327324 -0.562211 -0.516627  0.906075   \n",
              "2 -0.563610 -0.465084 -0.466183 -0.512122 -0.562211 -0.516627  0.906075   \n",
              "3  0.866592  1.421753 -0.466183 -0.368795 -0.562211 -0.516627  0.906075   \n",
              "4 -0.582428  0.478335 -0.466183 -0.339817 -0.562211 -0.516627  0.906075   \n",
              "\n",
              "   Sex_female  Sex_male  Embarked_C  Embarked_Q  Embarked_S  \n",
              "0   -0.742427  0.742427   -0.492527   -0.289333    0.611978  \n",
              "1   -0.742427  0.742427   -0.492527   -0.289333    0.611978  \n",
              "2   -0.742427  0.742427    2.030345   -0.289333   -1.634045  \n",
              "3   -0.742427  0.742427   -0.492527   -0.289333    0.611978  \n",
              "4    1.346933 -1.346933   -0.492527    3.456220   -1.634045  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c6f60a97-c99b-40c7-acfa-700d36df4f24\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Pclass_1</th>\n",
              "      <th>Pclass_2</th>\n",
              "      <th>Pclass_3</th>\n",
              "      <th>Sex_female</th>\n",
              "      <th>Sex_male</th>\n",
              "      <th>Embarked_C</th>\n",
              "      <th>Embarked_Q</th>\n",
              "      <th>Embarked_S</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.413062</td>\n",
              "      <td>1.421753</td>\n",
              "      <td>-0.466183</td>\n",
              "      <td>-0.159704</td>\n",
              "      <td>-0.562211</td>\n",
              "      <td>-0.516627</td>\n",
              "      <td>0.906075</td>\n",
              "      <td>-0.742427</td>\n",
              "      <td>0.742427</td>\n",
              "      <td>-0.492527</td>\n",
              "      <td>-0.289333</td>\n",
              "      <td>0.611978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.092413</td>\n",
              "      <td>-0.465084</td>\n",
              "      <td>0.727782</td>\n",
              "      <td>-0.327324</td>\n",
              "      <td>-0.562211</td>\n",
              "      <td>-0.516627</td>\n",
              "      <td>0.906075</td>\n",
              "      <td>-0.742427</td>\n",
              "      <td>0.742427</td>\n",
              "      <td>-0.492527</td>\n",
              "      <td>-0.289333</td>\n",
              "      <td>0.611978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.563610</td>\n",
              "      <td>-0.465084</td>\n",
              "      <td>-0.466183</td>\n",
              "      <td>-0.512122</td>\n",
              "      <td>-0.562211</td>\n",
              "      <td>-0.516627</td>\n",
              "      <td>0.906075</td>\n",
              "      <td>-0.742427</td>\n",
              "      <td>0.742427</td>\n",
              "      <td>2.030345</td>\n",
              "      <td>-0.289333</td>\n",
              "      <td>-1.634045</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.866592</td>\n",
              "      <td>1.421753</td>\n",
              "      <td>-0.466183</td>\n",
              "      <td>-0.368795</td>\n",
              "      <td>-0.562211</td>\n",
              "      <td>-0.516627</td>\n",
              "      <td>0.906075</td>\n",
              "      <td>-0.742427</td>\n",
              "      <td>0.742427</td>\n",
              "      <td>-0.492527</td>\n",
              "      <td>-0.289333</td>\n",
              "      <td>0.611978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.582428</td>\n",
              "      <td>0.478335</td>\n",
              "      <td>-0.466183</td>\n",
              "      <td>-0.339817</td>\n",
              "      <td>-0.562211</td>\n",
              "      <td>-0.516627</td>\n",
              "      <td>0.906075</td>\n",
              "      <td>1.346933</td>\n",
              "      <td>-1.346933</td>\n",
              "      <td>-0.492527</td>\n",
              "      <td>3.456220</td>\n",
              "      <td>-1.634045</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6f60a97-c99b-40c7-acfa-700d36df4f24')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c6f60a97-c99b-40c7-acfa-700d36df4f24 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c6f60a97-c99b-40c7-acfa-700d36df4f24');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0a55ebc7-a834-486a-b791-ce0442ca92bd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a55ebc7-a834-486a-b791-ce0442ca92bd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0a55ebc7-a834-486a-b791-ce0442ca92bd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_test_encoded_scaled",
              "summary": "{\n  \"name\": \"X_test_encoded_scaled\",\n  \"rows\": 179,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9969809170466647,\n        \"min\": -2.1631770388293927,\n        \"max\": 3.049531079564489,\n        \"num_unique_values\": 59,\n        \"samples\": [\n          -0.41306203879101355,\n          0.49022312251911765,\n          2.5226147354669126\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1813754051062972,\n        \"min\": -0.46508427634374117,\n        \"max\": 7.082266259422497,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.4217533575978185,\n          -0.46508427634374117,\n          7.082266259422497\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7930236648284674,\n        \"min\": -0.46618317148792077,\n        \"max\": 1.9217478939753856,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          -0.46618317148792077,\n          0.7277823612437324,\n          1.9217478939753856\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1627944922017852,\n        \"min\": -0.6625632269369692,\n        \"max\": 10.005329337567716,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          -0.4307418740092033,\n          1.696087285749538,\n          -0.5004092576803268\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0183696442607388,\n        \"min\": -0.5622111088094591,\n        \"max\": 1.7786912857655988,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.7786912857655988,\n          -0.5622111088094591\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9646130860609258,\n        \"min\": -0.516627442738718,\n        \"max\": 1.935630818794397,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.935630818794397,\n          -0.516627442738718\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0007281760069373,\n        \"min\": -1.103661422640814,\n        \"max\": 0.9060749786897732,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -1.103661422640814,\n          0.9060749786897732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9930767054679697,\n        \"min\": -0.7424272739336898,\n        \"max\": 1.3469332756346388,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.3469332756346388,\n          -0.7424272739336898\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9930767054679697,\n        \"min\": -1.3469332756346388,\n        \"max\": 0.7424272739336898,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -1.3469332756346388,\n          0.7424272739336898\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9321877561066881,\n        \"min\": -0.4925270520825824,\n        \"max\": 2.0303453298080556,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.0303453298080556,\n          -0.4925270520825824\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2332201553517772,\n        \"min\": -0.2893334595879614,\n        \"max\": 3.456219689987103,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3.456219689987103,\n          -0.2893334595879614\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0166414323523303,\n        \"min\": -1.6340450094117678,\n        \"max\": 0.611978246768114,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -1.6340450094117678,\n          0.611978246768114\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking the number of rows and columns\n",
        "X_test_encoded_scaled.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1lf33pmZPE5A",
        "outputId": "929f1d54-3132-497d-bd8e-a5f14303eaa1"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(179, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# taking only best features of xgb to test data\n",
        "X_test_best_features_knn = X_test_encoded_scaled[best_features_knn]"
      ],
      "metadata": {
        "id": "QgOrNg5YYhiJ"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# listing best features\n",
        "best_features_knn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fc2CqzpvjmHV",
        "outputId": "32d3fb0f-86b0-48e8-8845-a9e06bbc8891"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the labels on test data\n",
        "y_predict_knn = knn.predict(X_test_best_features_knn)"
      ],
      "metadata": {
        "id": "6OFX5QYejmEx"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the classification report for evaluation\n",
        "from sklearn.metrics import classification_report"
      ],
      "metadata": {
        "id": "2kER261kk4eI"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, y_predict_knn))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LGyitvbTjmBE",
        "outputId": "c4a6acd4-778e-4359-e2e9-52c4ab89b86e"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.85      0.83       110\n",
            "           1       0.74      0.70      0.72        69\n",
            "\n",
            "    accuracy                           0.79       179\n",
            "   macro avg       0.78      0.77      0.77       179\n",
            "weighted avg       0.79      0.79      0.79       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the confusion matrix\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay"
      ],
      "metadata": {
        "id": "-OPyJY-ajl-M"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test, y_predict_knn))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E4WKvDfMjl4Z",
        "outputId": "93d01c3c-37a2-4459-b006-f2f8450687d0"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[93 17]\n",
            " [21 48]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hyperparameter Tuning : K Neighbors Classifier"
      ],
      "metadata": {
        "id": "WNy10AKpl3PC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# importing gridsearchcv to check the best hyperparameters\n",
        "from sklearn.model_selection import GridSearchCV"
      ],
      "metadata": {
        "id": "4G8M7iAul7bx"
      },
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#setting the hyperparameters\n",
        "params_knn = {\n",
        "    'n_neighbors': np.arange(3,50),\n",
        "    'metric': ['minkowski', 'euclidean'],\n",
        "    'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],\n",
        "    }"
      ],
      "metadata": {
        "id": "d6UgfMSBlRsl"
      },
      "execution_count": 89,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the data and model to grid search cv\n",
        "grid_knn = GridSearchCV(estimator=knn, param_grid=params_knn, cv=5, n_jobs=-1)\n",
        "grid_knn.fit(X_train_best_features_knn,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        },
        "id": "KiveOu1PdaIB",
        "outputId": "ed458409-e068-4810-ebf5-9d4d693dca80"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=KNeighborsClassifier(), n_jobs=-1,\n",
              "             param_grid={'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],\n",
              "                         'metric': ['minkowski', 'euclidean'],\n",
              "                         'n_neighbors': array([ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n",
              "       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n",
              "       37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])})"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=KNeighborsClassifier(), n_jobs=-1,\n",
              "             param_grid={&#x27;algorithm&#x27;: [&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;],\n",
              "                         &#x27;metric&#x27;: [&#x27;minkowski&#x27;, &#x27;euclidean&#x27;],\n",
              "                         &#x27;n_neighbors&#x27;: array([ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n",
              "       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n",
              "       37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=KNeighborsClassifier(), n_jobs=-1,\n",
              "             param_grid={&#x27;algorithm&#x27;: [&#x27;auto&#x27;, &#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;],\n",
              "                         &#x27;metric&#x27;: [&#x27;minkowski&#x27;, &#x27;euclidean&#x27;],\n",
              "                         &#x27;n_neighbors&#x27;: array([ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n",
              "       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n",
              "       37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: KNeighborsClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the best hyperparameters\n",
        "print(grid_knn.best_estimator_, grid_knn.best_params_, grid_knn.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "828_zZo_lRpd",
        "outputId": "9d30c41e-0e2c-4610-ecf0-7f501569fb5f"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KNeighborsClassifier(algorithm='ball_tree') {'algorithm': 'ball_tree', 'metric': 'minkowski', 'n_neighbors': 5} 0.8119078104993598\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# testing grid_knn model on test data\n",
        "y_predict_grid_knn = grid_knn.predict(X_test_best_features_knn)\n",
        "print(classification_report(y_test, y_predict_grid_knn))\n",
        "print(confusion_matrix(y_test, y_predict_grid_knn))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ap8ATFX5lRk9",
        "outputId": "5de68ea9-6188-413c-c7ee-7f598b8ca0cc"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.85      0.83       110\n",
            "           1       0.73      0.68      0.71        69\n",
            "\n",
            "    accuracy                           0.78       179\n",
            "   macro avg       0.77      0.76      0.77       179\n",
            "weighted avg       0.78      0.78      0.78       179\n",
            "\n",
            "[[93 17]\n",
            " [22 47]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Best Parameters : {'algorithm': 'ball_tree', 'metric': 'minkowski', 'n_neighbors': 5}"
      ],
      "metadata": {
        "id": "lryc8xlgmbAs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Final Model : K Neighbors Classifier"
      ],
      "metadata": {
        "id": "BvJovCmSmeiQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the model with best hyper parameter\n",
        "model1 = KNeighborsClassifier(algorithm='ball_tree')"
      ],
      "metadata": {
        "id": "iqTvwFgClRhs"
      },
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the training data with best features of knn\n",
        "model1.fit(X_train_best_features_knn,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "Bap1ViaImgD2",
        "outputId": "1b330b81-edb4-415d-b499-7b0ce82745da"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='ball_tree')"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Evaluation : K Neighbors Classifier"
      ],
      "metadata": {
        "id": "W5uISwMYmyD6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the test data\n",
        "y_predict_model1 = model1.predict(X_test_best_features_knn)"
      ],
      "metadata": {
        "id": "0I1Zw7DRmgAH"
      },
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting classification report\n",
        "print(classification_report(y_test, y_predict_model1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e15ALkQCmf9V",
        "outputId": "1643b3d5-84c9-4938-dde5-4837ebe8726a"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.85      0.83       110\n",
            "           1       0.73      0.68      0.71        69\n",
            "\n",
            "    accuracy                           0.78       179\n",
            "   macro avg       0.77      0.76      0.77       179\n",
            "weighted avg       0.78      0.78      0.78       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the accuracy score for evaluation\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "metadata": {
        "id": "Wmsc6u7GfafO"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#model1 accuracy on training data\n",
        "y_train_predict_model1 = model1.predict(X_train_best_features_knn)\n",
        "train_data_accuracy_model1 = accuracy_score(y_train_predict_model1, y_train)\n",
        "print('Accuracy on training data: ',train_data_accuracy_model1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BuJcsi-ClRe2",
        "outputId": "01287ffa-15dc-4043-b3b8-7f00a35d47e8"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on training data:  0.8553370786516854\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# classification report on training data of model1\n",
        "print(classification_report(y_train, y_train_predict_model1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4h3ItSd_lRcB",
        "outputId": "26eb41cf-2721-4b12-a265-4ea8e643e8e1"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.85      0.92      0.89       439\n",
            "           1       0.86      0.75      0.80       273\n",
            "\n",
            "    accuracy                           0.86       712\n",
            "   macro avg       0.86      0.83      0.84       712\n",
            "weighted avg       0.86      0.86      0.85       712\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#setting the figure parameters\n",
        "plt.rcParams['figure.figsize'] = (8, 8)\n",
        "plt.rcParams['figure.dpi'] = 100"
      ],
      "metadata": {
        "id": "f4765yN7gjfd"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of training data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_train, y_train_predict_model1)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['Not Survived', 'Survived'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "id": "GRf4BLaugQN3",
        "outputId": "df777f96-b704-4c1a-d301-dff2854f7351"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#model1 accuracy on test data\n",
        "y_test_predict_model1 = model1.predict(X_test_best_features_knn)\n",
        "test_data_accuracy_model1 = accuracy_score(y_test_predict_model1, y_test)\n",
        "print('Accuracy on test data: ',test_data_accuracy_model1 )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5mdLmss9m-jp",
        "outputId": "c65e582b-e542-43d5-8393-c2082963081c"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on test data:  0.7821229050279329\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#classification report on test data of model1\n",
        "print(classification_report(y_test, y_test_predict_model1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "99BT21eKm-hA",
        "outputId": "69473e76-27b4-4bd8-cc9c-6ca0e73c28e4"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.85      0.83       110\n",
            "           1       0.73      0.68      0.71        69\n",
            "\n",
            "    accuracy                           0.78       179\n",
            "   macro avg       0.77      0.76      0.77       179\n",
            "weighted avg       0.78      0.78      0.78       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of training data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_test, y_test_predict_model1)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['Not Survived', 'Survived'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "id": "3DDWXdu6m-eL",
        "outputId": "37d6d373-f803-4f1f-880e-3cb5a23f3c1c"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. XG Boost Classifier Model"
      ],
      "metadata": {
        "id": "JBBbWJ7AOoEF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "XG Boost Classifier as the highest accuracy based on cross validation score according to its default hyperparameters\n",
        "\n",
        "XGBClassifier() = 83.09428372255141 %\n",
        "\n"
      ],
      "metadata": {
        "id": "o7eNRoDaOrJy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the XG Boost Classifier model\n",
        "xgb = XGBClassifier()"
      ],
      "metadata": {
        "id": "mh7gRYSJORpB"
      },
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the best features of XG Boost Classifier by calling the feature selection function\n",
        "best_score_xgb = 0\n",
        "best_features_xgb = None\n",
        "for i in range(X_train_encoded_scaled.shape[1]):\n",
        "    col , score = find_best_feature(i+1,xgb,X_train_encoded_scaled,y_train)\n",
        "    if best_score_xgb < score:\n",
        "        best_score_xgb = score\n",
        "        best_features_xgb = col\n",
        "print(best_features_xgb)\n",
        "print(best_score_xgb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hhl4RQvvORmN",
        "outputId": "6bd90ef7-79a4-4d4c-abd1-a18f52bb49df"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Selected columns:  ['Sex_female']\n",
            "1 78.93627499261302\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Pclass_3', 'Sex_female']\n",
            "2 78.23500443218754\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Pclass_1', 'Pclass_3', 'Sex_female']\n",
            "3 78.23500443218754\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_S']\n",
            "4 81.60642174726682\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_S']\n",
            "5 81.60642174726682\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_S']\n",
            "6 80.34571062740078\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['SibSp', 'Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_S']\n",
            "7 80.20191076529105\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_S']\n",
            "8 79.50753471880232\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Parch', 'Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_S']\n",
            "9 79.08696936865951\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Parch', 'Fare', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_S']\n",
            "10 79.36668964837979\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Parch', 'Fare', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_Q', 'Embarked_S']\n",
            "11 79.92810006894514\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Parch', 'Fare', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S']\n",
            "12 79.92810006894514\n",
            "----------------------\n",
            "\n",
            "['Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_S']\n",
            "81.60642174726682\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Best Features : ['Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_S']"
      ],
      "metadata": {
        "id": "v5Dxf0qCO2a5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# using a diffferent df to store\n",
        "X_train_best_features_xgb = X_train_encoded_scaled[best_features_xgb]"
      ],
      "metadata": {
        "id": "rt20W2EXORjZ"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the cross val score of xgb with its best features\n",
        "cv_score_xgb = cross_val_score(xgb, X_train_best_features_xgb, y_train, cv=5)\n",
        "print(cv_score_xgb)\n",
        "print(cv_score_xgb.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "caS0BwkyOxkz",
        "outputId": "fec1955e-af58-4875-9979-afc94a293af1"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.83216783 0.76223776 0.83802817 0.84507042 0.8028169 ]\n",
            "0.8160642174726682\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the default model with its best features\n",
        "xgb.fit(X_train_best_features_xgb,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "id": "iwE59OKDOxe8",
        "outputId": "815129a7-b20c-49ea-befd-0aacf4159f03"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-4 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-4 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-4 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-4 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-4 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;XGBClassifier<span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# taking only best features of xgb to test data\n",
        "X_test_best_features_xgb = X_test_encoded_scaled[best_features_xgb]"
      ],
      "metadata": {
        "id": "qEvoaw3QPE2F"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "best_features_xgb"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-aYKt4U_PEzS",
        "outputId": "aba43790-dbbc-4a8c-9b8b-8f21e978d248"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_S']"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the labels on test data\n",
        "y_predict_xgb = xgb.predict(X_test_best_features_xgb)"
      ],
      "metadata": {
        "id": "kjqFFQORQftR"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the classification report for evaluation\n",
        "from sklearn.metrics import classification_report"
      ],
      "metadata": {
        "id": "blTOJxtCQfqX"
      },
      "execution_count": 113,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, y_predict_xgb))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vWE28wINQfnw",
        "outputId": "28e55750-1b08-412e-b386-fcf5dfac833b"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.95      0.85       110\n",
            "           1       0.86      0.55      0.67        69\n",
            "\n",
            "    accuracy                           0.79       179\n",
            "   macro avg       0.82      0.75      0.76       179\n",
            "weighted avg       0.81      0.79      0.78       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# importing the confusion matrix\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay"
      ],
      "metadata": {
        "id": "t7r4f_usQfko"
      },
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test, y_predict_xgb))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TXrxukAoQfhm",
        "outputId": "f3e38038-e5d4-4a31-abd7-ffb81e92329d"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[104   6]\n",
            " [ 31  38]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hyperparameter Tuning : XG Boost Classifier"
      ],
      "metadata": {
        "id": "17swU-aKQoqw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# parameters for XG Boost Classifier\n",
        "params_xgb = {\n",
        "    'n_estimators': [300, 350, 400],\n",
        "    'learning_rate': [0.01, 0.1, 1],\n",
        "    'max_depth': [1,2,3,4,5],\n",
        "    }"
      ],
      "metadata": {
        "id": "lXGxECODQpxa"
      },
      "execution_count": 117,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the data and model to grid search cv\n",
        "grid_xgb = GridSearchCV(estimator=xgb, param_grid=params_xgb, cv=5, n_jobs=-1)\n",
        "grid_xgb.fit(X_train_best_features_xgb,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        },
        "id": "f1kgzcSMQpup",
        "outputId": "f4e96c96-7799-49cd-ea6c-af3e984d6169"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5,\n",
              "             estimator=XGBClassifier(base_score=None, booster=None,\n",
              "                                     callbacks=None, colsample_bylevel=None,\n",
              "                                     colsample_bynode=None,\n",
              "                                     colsample_bytree=None, device=None,\n",
              "                                     early_stopping_rounds=None,\n",
              "                                     enable_categorical=False, eval_metric=None,\n",
              "                                     feature_types=None, gamma=None,\n",
              "                                     grow_policy=None, importance_type=None,\n",
              "                                     interaction_constraints=None,\n",
              "                                     learning_rate=None,...\n",
              "                                     max_cat_threshold=None,\n",
              "                                     max_cat_to_onehot=None,\n",
              "                                     max_delta_step=None, max_depth=None,\n",
              "                                     max_leaves=None, min_child_weight=None,\n",
              "                                     missing=nan, monotone_constraints=None,\n",
              "                                     multi_strategy=None, n_estimators=None,\n",
              "                                     n_jobs=None, num_parallel_tree=None,\n",
              "                                     random_state=None, ...),\n",
              "             n_jobs=-1,\n",
              "             param_grid={'learning_rate': [0.01, 0.1, 1],\n",
              "                         'max_depth': [1, 2, 3, 4, 5],\n",
              "                         'n_estimators': [300, 350, 400]})"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-5 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-5 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-5 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-5 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-5 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=XGBClassifier(base_score=None, booster=None,\n",
              "                                     callbacks=None, colsample_bylevel=None,\n",
              "                                     colsample_bynode=None,\n",
              "                                     colsample_bytree=None, device=None,\n",
              "                                     early_stopping_rounds=None,\n",
              "                                     enable_categorical=False, eval_metric=None,\n",
              "                                     feature_types=None, gamma=None,\n",
              "                                     grow_policy=None, importance_type=None,\n",
              "                                     interaction_constraints=None,\n",
              "                                     learning_rate=None,...\n",
              "                                     max_cat_threshold=None,\n",
              "                                     max_cat_to_onehot=None,\n",
              "                                     max_delta_step=None, max_depth=None,\n",
              "                                     max_leaves=None, min_child_weight=None,\n",
              "                                     missing=nan, monotone_constraints=None,\n",
              "                                     multi_strategy=None, n_estimators=None,\n",
              "                                     n_jobs=None, num_parallel_tree=None,\n",
              "                                     random_state=None, ...),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;learning_rate&#x27;: [0.01, 0.1, 1],\n",
              "                         &#x27;max_depth&#x27;: [1, 2, 3, 4, 5],\n",
              "                         &#x27;n_estimators&#x27;: [300, 350, 400]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=XGBClassifier(base_score=None, booster=None,\n",
              "                                     callbacks=None, colsample_bylevel=None,\n",
              "                                     colsample_bynode=None,\n",
              "                                     colsample_bytree=None, device=None,\n",
              "                                     early_stopping_rounds=None,\n",
              "                                     enable_categorical=False, eval_metric=None,\n",
              "                                     feature_types=None, gamma=None,\n",
              "                                     grow_policy=None, importance_type=None,\n",
              "                                     interaction_constraints=None,\n",
              "                                     learning_rate=None,...\n",
              "                                     max_cat_threshold=None,\n",
              "                                     max_cat_to_onehot=None,\n",
              "                                     max_delta_step=None, max_depth=None,\n",
              "                                     max_leaves=None, min_child_weight=None,\n",
              "                                     missing=nan, monotone_constraints=None,\n",
              "                                     multi_strategy=None, n_estimators=None,\n",
              "                                     n_jobs=None, num_parallel_tree=None,\n",
              "                                     random_state=None, ...),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;learning_rate&#x27;: [0.01, 0.1, 1],\n",
              "                         &#x27;max_depth&#x27;: [1, 2, 3, 4, 5],\n",
              "                         &#x27;n_estimators&#x27;: [300, 350, 400]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: XGBClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.01, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=2, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">XGBClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.01, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=2, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the best hyperparameters\n",
        "print(grid_xgb.best_estimator_, grid_xgb.best_params_, grid_xgb.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f6QfhPCeQpr2",
        "outputId": "fa41e5bf-a6f8-4229-e99a-ff73fcead6f4"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
            "              colsample_bylevel=None, colsample_bynode=None,\n",
            "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
            "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
            "              gamma=None, grow_policy=None, importance_type=None,\n",
            "              interaction_constraints=None, learning_rate=0.01, max_bin=None,\n",
            "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
            "              max_delta_step=None, max_depth=2, max_leaves=None,\n",
            "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
            "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
            "              num_parallel_tree=None, random_state=None, ...) {'learning_rate': 0.01, 'max_depth': 2, 'n_estimators': 300} 0.8160642174726682\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# testing grid_xgb model on test data\n",
        "y_predict_grid_xgb = grid_xgb.predict(X_test_best_features_xgb)\n",
        "print(classification_report(y_test, y_predict_grid_xgb))\n",
        "print(confusion_matrix(y_test, y_predict_grid_xgb))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TMzj_YEAQppJ",
        "outputId": "23b1430d-b88b-4a28-f140-541eda17dbf9"
      },
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.95      0.85       110\n",
            "           1       0.86      0.55      0.67        69\n",
            "\n",
            "    accuracy                           0.79       179\n",
            "   macro avg       0.82      0.75      0.76       179\n",
            "weighted avg       0.81      0.79      0.78       179\n",
            "\n",
            "[[104   6]\n",
            " [ 31  38]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Best Parameters : {'learning_rate': 0.01, 'max_depth': 2, 'n_estimators': 300}"
      ],
      "metadata": {
        "id": "5-I0E30VQyWj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Final Model : XG Boost Classifier"
      ],
      "metadata": {
        "id": "bHGbJG38rai0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the model with best hyper parameter\n",
        "model2 = XGBClassifier(learning_rate= 0.01, max_depth= 2, n_estimators= 300)"
      ],
      "metadata": {
        "id": "qOYBFJDmq2Zj"
      },
      "execution_count": 121,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the training data with best features of xgb\n",
        "model2.fit(X_train_best_features_xgb,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "id": "mEiggs1vq2Vt",
        "outputId": "3b574905-5972-44cb-978e-eb5c4b2e4706"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.01, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=2, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-6 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-6 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-6 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-6 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-6 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-6 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.01, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=2, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;XGBClassifier<span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=0.01, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=2, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
              "              num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Evaluation : XG Boost Classifier"
      ],
      "metadata": {
        "id": "ffaSarfur6zO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the test data\n",
        "y_predict_model2 = model2.predict(X_test_best_features_xgb)"
      ],
      "metadata": {
        "id": "_7dnZInGq2Rr"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting classification report\n",
        "print(classification_report(y_test, y_predict_model2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2YnnwwzQsHYV",
        "outputId": "f2bc62a4-98e8-49bf-c74b-86f176e05cac"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.95      0.85       110\n",
            "           1       0.86      0.55      0.67        69\n",
            "\n",
            "    accuracy                           0.79       179\n",
            "   macro avg       0.82      0.75      0.76       179\n",
            "weighted avg       0.81      0.79      0.78       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#model2 accuracy on training data\n",
        "y_train_predict_model2 = model2.predict(X_train_best_features_xgb)\n",
        "train_data_accuracy_model2 = accuracy_score(y_train_predict_model2, y_train)\n",
        "print('Accuracy on training data: ',train_data_accuracy_model2 )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HFZcjm6QsHVk",
        "outputId": "a388d0af-a2a4-4850-a521-4bd60cfd2792"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on training data:  0.8160112359550562\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# classification report on training data of model2\n",
        "print(classification_report(y_train, y_train_predict_model2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EKWcCp7jsHSh",
        "outputId": "61e7947b-bc7e-4f36-a39e-33741f293ffe"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.95      0.86       439\n",
            "           1       0.89      0.59      0.71       273\n",
            "\n",
            "    accuracy                           0.82       712\n",
            "   macro avg       0.84      0.77      0.79       712\n",
            "weighted avg       0.83      0.82      0.81       712\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of training data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_train, y_train_predict_model2)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['Not Survived', 'Survived'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "id": "aNge5bCOkwqb",
        "outputId": "d61c7694-3e00-468a-844c-e5a4c7736db4"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#model2 accuracy on test data\n",
        "y_test_predict_model2 = model2.predict(X_test_best_features_xgb)\n",
        "test_data_accuracy_model2 = accuracy_score(y_test_predict_model2, y_test)\n",
        "print('Accuracy on test data: ',test_data_accuracy_model2 )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H4NXUFUksTqv",
        "outputId": "156131bc-7c37-493c-f12a-a12900bee77b"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on test data:  0.7932960893854749\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#classification report on test data of model2\n",
        "print(classification_report(y_test, y_test_predict_model2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0MKGv2OAsTny",
        "outputId": "981c7aa6-ec59-4463-b99c-47679910e94e"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.95      0.85       110\n",
            "           1       0.86      0.55      0.67        69\n",
            "\n",
            "    accuracy                           0.79       179\n",
            "   macro avg       0.82      0.75      0.76       179\n",
            "weighted avg       0.81      0.79      0.78       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of test data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_test, y_test_predict_model2)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['Not Survived', 'Survived'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "id": "IBYSrXtulJGv",
        "outputId": "52b386fa-e189-43b5-8d72-0ff6ff692004"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3. Logistic Regression Model"
      ],
      "metadata": {
        "id": "BUYMESf8-_Zu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Logistic Regression as the 3rd highest accuracy based on cross validation score according to its default hyperparameters LogisticRegression() = 84.9059863132018 %"
      ],
      "metadata": {
        "id": "m-VqGJpAdkPV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the Logistic Regression model\n",
        "lr = LogisticRegression()"
      ],
      "metadata": {
        "id": "QHA760Ra6wy2"
      },
      "execution_count": 135,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the best features of Logistic Regression by calling the feature selection function\n",
        "best_score_lr = 0\n",
        "best_features_lr = None\n",
        "for i in range(X_train_encoded_scaled.shape[1]):\n",
        "    col , score = find_best_feature(i+1,lr,X_train_encoded_scaled,y_train)\n",
        "    if best_score_lr < score:\n",
        "        best_score_lr = score\n",
        "        best_features_lr = col\n",
        "print(best_features_lr)\n",
        "print(best_score_lr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T8pvfCgn6wvl",
        "outputId": "6a05733b-5a00-472f-befa-69ed50c74030"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Selected columns:  ['Sex_male']\n",
            "1 78.93627499261302\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Pclass_3', 'Sex_male']\n",
            "2 78.93627499261302\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Pclass_3', 'Sex_female', 'Sex_male']\n",
            "3 78.93627499261302\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']\n",
            "4 78.93627499261302\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']\n",
            "5 79.92514527725795\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']\n",
            "6 80.20289569585344\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_S']\n",
            "7 79.91923569388358\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_S']\n",
            "8 79.91923569388358\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Fare', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_S']\n",
            "9 79.63951541416331\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Fare', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_Q', 'Embarked_S']\n",
            "10 79.78134541514822\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Parch', 'Fare', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_Q', 'Embarked_S']\n",
            "11 79.92317541613316\n",
            "----------------------\n",
            "\n",
            "Selected columns:  ['Age', 'SibSp', 'Parch', 'Fare', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S']\n",
            "12 79.78233034571063\n",
            "----------------------\n",
            "\n",
            "['Age', 'SibSp', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']\n",
            "80.20289569585344\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Best Features : ['Age', 'SibSp', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']"
      ],
      "metadata": {
        "id": "4ISXlkqNqAUC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# using a diffferent df to store\n",
        "X_train_best_features_lr = X_train_encoded_scaled[best_features_lr]"
      ],
      "metadata": {
        "id": "yo1MgZXrBYW2"
      },
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the cross val score of lr with its best features\n",
        "cv_score_lr = cross_val_score(lr, X_train_best_features_lr, y_train, cv=5)\n",
        "print(cv_score_lr)\n",
        "print(cv_score_lr.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n2f-BpH0ZyN3",
        "outputId": "fab32eff-3fff-481b-b5e1-4b3ff43a7e3d"
      },
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.81118881 0.74825175 0.83098592 0.80985915 0.80985915]\n",
            "0.8020289569585344\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the default model with its best features\n",
        "lr.fit(X_train_best_features_lr,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "FZRXJJ2lZyKu",
        "outputId": "66c2d9e4-caba-490f-d0d7-b29cddde9878"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-7 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-7 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-7 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-7 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-7 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-7 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-7 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-7 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-7 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-7 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-7 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-7 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-7 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-7 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-7 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# taking only best features of lr to test data\n",
        "X_test_best_features_lr = X_test_encoded_scaled[best_features_lr]"
      ],
      "metadata": {
        "id": "Q8C9H25ouaVI"
      },
      "execution_count": 141,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "best_features_lr"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jwVzk66xem_D",
        "outputId": "d3c8e6e5-ab15-4f48-9175-5db5138ea598"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Age', 'SibSp', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Sex_male']"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the labels on test data\n",
        "y_predict_lr = lr.predict(X_test_best_features_lr)"
      ],
      "metadata": {
        "id": "atTIojM6em6t"
      },
      "execution_count": 143,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, y_predict_lr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sZ6qU-2zem3H",
        "outputId": "c8add190-f771-444e-cf62-70d91ba7dfb7"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.89      0.86       110\n",
            "           1       0.80      0.70      0.74        69\n",
            "\n",
            "    accuracy                           0.82       179\n",
            "   macro avg       0.81      0.79      0.80       179\n",
            "weighted avg       0.81      0.82      0.81       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test, y_predict_lr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LNK7qS2eem0D",
        "outputId": "3e24fd8f-42f2-4b99-9c13-3d4167caa20c"
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[98 12]\n",
            " [21 48]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hyperparameter Tuning : Logistic Regression Model"
      ],
      "metadata": {
        "id": "Tna7YULjfAAP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#setting the hyperparameters\n",
        "params_lr = {\n",
        "    'C': [0.01, 0.1, 1, 10, 100],\n",
        "    'penalty': ['l1', 'l2', 'elasticnet', 'none'],\n",
        "    'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']\n",
        "    }"
      ],
      "metadata": {
        "id": "Y4sr-22ae95-"
      },
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the data and model to grid search cv\n",
        "grid_lr = GridSearchCV(estimator=lr, param_grid=params_lr, cv=5, n_jobs=-1)\n",
        "grid_lr.fit(X_train_best_features_lr,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "559IFCW7e92U",
        "outputId": "16ff3f81-1721-4e16-ceda-1006dc9e2e2e"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:540: FitFailedWarning: \n",
            "325 fits failed out of a total of 500.\n",
            "The score on these train-test partitions for these parameters will be set to nan.\n",
            "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
            "\n",
            "Below are more details about the failures:\n",
            "--------------------------------------------------------------------------------\n",
            "25 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1194, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 67, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Solver newton-cg supports only 'l2' or None penalties, got l1 penalty.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "25 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1194, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 67, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Solver lbfgs supports only 'l2' or None penalties, got l1 penalty.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "25 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1194, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 67, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Solver sag supports only 'l2' or None penalties, got l1 penalty.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "25 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1194, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 67, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Solver newton-cg supports only 'l2' or None penalties, got elasticnet penalty.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "25 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1194, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 67, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Solver lbfgs supports only 'l2' or None penalties, got elasticnet penalty.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "25 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1194, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 75, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Only 'saga' solver supports elasticnet penalty, got solver=liblinear.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "25 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1194, in fit\n",
            "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 67, in _check_solver\n",
            "    raise ValueError(\n",
            "ValueError: Solver sag supports only 'l2' or None penalties, got elasticnet penalty.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "25 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n",
            "    return fit_method(estimator, *args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1204, in fit\n",
            "    raise ValueError(\"l1_ratio must be specified when penalty is elasticnet.\")\n",
            "ValueError: l1_ratio must be specified when penalty is elasticnet.\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "125 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1466, in wrapper\n",
            "    estimator._validate_params()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 666, in _validate_params\n",
            "    validate_parameter_constraints(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\", line 95, in validate_parameter_constraints\n",
            "    raise InvalidParameterError(\n",
            "sklearn.utils._param_validation.InvalidParameterError: The 'penalty' parameter of LogisticRegression must be a str among {'l2', 'elasticnet', 'l1'} or None. Got 'none' instead.\n",
            "\n",
            "  warnings.warn(some_fits_failed_message, FitFailedWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:1052: UserWarning: One or more of the test scores are non-finite: [       nan        nan 0.78936275        nan 0.78936275 0.80200926\n",
            " 0.80200926 0.7893923  0.80200926 0.80200926        nan        nan\n",
            "        nan        nan        nan        nan        nan        nan\n",
            "        nan        nan        nan        nan 0.79643455        nan\n",
            " 0.80062051 0.80062051 0.80062051 0.7978036  0.80062051 0.80062051\n",
            "        nan        nan        nan        nan        nan        nan\n",
            "        nan        nan        nan        nan        nan        nan\n",
            " 0.80202896        nan 0.80202896 0.80202896 0.80202896 0.80202896\n",
            " 0.80202896 0.80202896        nan        nan        nan        nan\n",
            "        nan        nan        nan        nan        nan        nan\n",
            "        nan        nan 0.80202896        nan 0.80202896 0.80202896\n",
            " 0.80202896 0.80202896 0.80202896 0.80202896        nan        nan\n",
            "        nan        nan        nan        nan        nan        nan\n",
            "        nan        nan        nan        nan 0.80202896        nan\n",
            " 0.80202896 0.80202896 0.80202896 0.80202896 0.80202896 0.80202896\n",
            "        nan        nan        nan        nan        nan        nan\n",
            "        nan        nan        nan        nan]\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=LogisticRegression(), n_jobs=-1,\n",
              "             param_grid={'C': [0.01, 0.1, 1, 10, 100],\n",
              "                         'penalty': ['l1', 'l2', 'elasticnet', 'none'],\n",
              "                         'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag',\n",
              "                                    'saga']})"
            ],
            "text/html": [
              "<style>#sk-container-id-8 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-8 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-8 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-8 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-8 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-8 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-8 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-8 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-8 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-8 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-8 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-8 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-8 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-8 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-8 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=LogisticRegression(), n_jobs=-1,\n",
              "             param_grid={&#x27;C&#x27;: [0.01, 0.1, 1, 10, 100],\n",
              "                         &#x27;penalty&#x27;: [&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;elasticnet&#x27;, &#x27;none&#x27;],\n",
              "                         &#x27;solver&#x27;: [&#x27;newton-cg&#x27;, &#x27;lbfgs&#x27;, &#x27;liblinear&#x27;, &#x27;sag&#x27;,\n",
              "                                    &#x27;saga&#x27;]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=LogisticRegression(), n_jobs=-1,\n",
              "             param_grid={&#x27;C&#x27;: [0.01, 0.1, 1, 10, 100],\n",
              "                         &#x27;penalty&#x27;: [&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;elasticnet&#x27;, &#x27;none&#x27;],\n",
              "                         &#x27;solver&#x27;: [&#x27;newton-cg&#x27;, &#x27;lbfgs&#x27;, &#x27;liblinear&#x27;, &#x27;sag&#x27;,\n",
              "                                    &#x27;saga&#x27;]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: LogisticRegression</label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=1, penalty=&#x27;l1&#x27;, solver=&#x27;liblinear&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=1, penalty=&#x27;l1&#x27;, solver=&#x27;liblinear&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the best hyperparameters\n",
        "print(grid_lr.best_estimator_, grid_lr.best_params_, grid_lr.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yzf5Ch6ae9yu",
        "outputId": "cc1eb690-e520-4498-b377-a42f8dd4dd5e"
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LogisticRegression(C=1, penalty='l1', solver='liblinear') {'C': 1, 'penalty': 'l1', 'solver': 'liblinear'} 0.8020289569585344\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# testing grid_lr model on test data\n",
        "y_predict_grid_lr = grid_lr.predict(X_test_best_features_lr)\n",
        "print(classification_report(y_test, y_predict_grid_lr))\n",
        "print(confusion_matrix(y_test, y_predict_grid_lr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZSfWqVTZe9vn",
        "outputId": "e9997ade-8197-488c-814f-5dfebd06a336"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.88      0.85       110\n",
            "           1       0.79      0.70      0.74        69\n",
            "\n",
            "    accuracy                           0.81       179\n",
            "   macro avg       0.80      0.79      0.79       179\n",
            "weighted avg       0.81      0.81      0.81       179\n",
            "\n",
            "[[97 13]\n",
            " [21 48]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Best Parameters : {'C': 1, 'penalty': 'l1', 'solver': 'liblinear'}"
      ],
      "metadata": {
        "id": "NC6kmhEYfSZ4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Final Model : Logistic Regression Model"
      ],
      "metadata": {
        "id": "iiwn8M27fWE9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading the model with best hyper parameter\n",
        "model3 = LogisticRegression(C=1, penalty='l1', solver='liblinear')"
      ],
      "metadata": {
        "id": "sWqPokzqfDbR"
      },
      "execution_count": 150,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fitting the training data with best features of lr\n",
        "model3.fit(X_train_best_features_lr,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "TTdDRnvZfDYa",
        "outputId": "ee5885c9-e141-47bb-8fbf-a62fd2275a4d"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1, penalty='l1', solver='liblinear')"
            ],
            "text/html": [
              "<style>#sk-container-id-9 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-9 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-9 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-9 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-9 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-9 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-9 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-9 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-9 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-9 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-9 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=1, penalty=&#x27;l1&#x27;, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" checked><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=1, penalty=&#x27;l1&#x27;, solver=&#x27;liblinear&#x27;)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Evaluation : Logistic Regression Model"
      ],
      "metadata": {
        "id": "gVdgF7vifjif"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# predicting the test data\n",
        "y_predict_model3 = model3.predict(X_test_best_features_lr)"
      ],
      "metadata": {
        "id": "Vk0ClDGXfDVR"
      },
      "execution_count": 152,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# getting classification report\n",
        "print(classification_report(y_test, y_predict_model3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WOPUqSjufmP8",
        "outputId": "839af7d9-4d4f-407c-80c5-fb30e4062e6f"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.88      0.85       110\n",
            "           1       0.79      0.70      0.74        69\n",
            "\n",
            "    accuracy                           0.81       179\n",
            "   macro avg       0.80      0.79      0.79       179\n",
            "weighted avg       0.81      0.81      0.81       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#model1 accuracy on training data\n",
        "y_train_predict_model3 = model3.predict(X_train_best_features_lr)\n",
        "train_data_accuracy_model3 = accuracy_score(y_train_predict_model3, y_train)\n",
        "print('Accuracy on training data: ',train_data_accuracy_model3 )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1-uX8j4yfmLD",
        "outputId": "473dd3c5-0ca1-4f94-c7f2-8131ebb17f8d"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on training data:  0.8061797752808989\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# classification report on training data of model3\n",
        "print(classification_report(y_train, y_train_predict_model3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ted3qcd6fwG1",
        "outputId": "338ec054-f280-46aa-d4d2-61429492d6b7"
      },
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.86      0.85       439\n",
            "           1       0.76      0.71      0.74       273\n",
            "\n",
            "    accuracy                           0.81       712\n",
            "   macro avg       0.80      0.79      0.79       712\n",
            "weighted avg       0.80      0.81      0.80       712\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of training data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_train, y_train_predict_model3)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['No Survived', 'Survived'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "id": "_P1npF0wfwCP",
        "outputId": "2d32ea99-8dd8-433e-b71b-74c270e01713"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "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1q1b9eijj+r48ePq3LmzBg0a5PbYmjZt6vC6YcOGiouLsydb69ev1/Hjx/Xggw9e8v2VKlVSu3bt7MlZZmam0tLS7L+od+/eLYvFotjYWHt6FxwcrPXr1+vQoUP2n0GzZs0c7puYmOj2ZwHKsp49e+ro0aP68ssv1b59e61bt06NGzd2+leqS/njd7Z37946fPiwtm7dKul8Ct24cWPVrVv3ku/v2LGjypcvry+//FLS+WlpoaGhatOmjSRp586dOnjwoEJCQuzf14iICBUUFOjQoUPKy8tTdna2w3e2XLlyF40LwOVRXAPXqGXLlkpKStLo0aMNu6ePj4/uuOMOPfPMM/r888+VkpKi999/X5mZmfbrf5wDWVxcfNF9goKCLjqXnJxsL65TU1PVvn17VaxY8bJjSU5O1qeffqri4mKlpqYqISFBCQkJkqQzZ87I19dX6enp2rFjh/3IyMjQzJkzr/rzA96oQoUKatu2rcaOHastW7ZowIABevHFF+Xjc/5X7e+/s5f6vkoXf2fNZrNat27t8J29XGotnV/g+MADDzi0/8tf/mJfGHnmzBk1adLE4fu6Y8cO7d+//5JTTQA7j04J8fDiSYNRXAMGmDp1qpYuXaq0tDSH83FxcRdtxbV582bFxsbK19fX5fvHx8dLks6ePSvpfKKcnZ1tv56fn28vvK+kb9+++uGHH5Senq5PP/3U6S9qSeratasKCgq0YsWKi36xN2rUSBaLRcePH1ft2rUdjgs7GMTFxWnbtm0O97yQwgE3svj4eJ09e1aVKlWSJIfv7O8XN15JcnKyFi1apLS0NP3000/q3bv3FduvWLFCe/bs0dq1ax2+s40bN9aBAwcUGRl50Xc2LCxMYWFhqlKlisN3tqSkROnp6S6PF7jZUVwDBkhISFBycrJmzZrlcP65557TmjVrNGnSJO3fv1/z58/XW2+95bDzxx898MADmjFjhrZt26aff/5Z69at09ChQxUbG2v/U3Dr1q31f//3f9q4caN2796t/v37u1ysV69eXXfeeacGDhwoi8WiLl26OG0fFBSkbt26aezYscrIyFCfPn3s12JjY5WcnKx+/frp888/V2Zmpr799ltNmTJFX331lSTpqaee0ooVK/Taa6/pwIEDeuutt7RixQqXxgp4g5MnT6p169b6xz/+oV27dikzM1OffPKJpk2b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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#model3 accuracy on test data\n",
        "y_test_predict_model3 = model3.predict(X_test_best_features_lr)\n",
        "test_data_accuracy_model3 = accuracy_score(y_test_predict_model3,y_test)\n",
        "print('Accuracy on test data: ',test_data_accuracy_model3 )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "chmbxXzDfv-Y",
        "outputId": "fed889a8-2794-4522-b390-106fef688942"
      },
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on test data:  0.8100558659217877\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#classification report on test data of model3\n",
        "print(classification_report(y_test,y_test_predict_model3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v2XhUaH4fmIN",
        "outputId": "26888d18-3928-40e9-98ce-89b20914e88a"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.88      0.85       110\n",
            "           1       0.79      0.70      0.74        69\n",
            "\n",
            "    accuracy                           0.81       179\n",
            "   macro avg       0.80      0.79      0.79       179\n",
            "weighted avg       0.81      0.81      0.81       179\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix of testing data\n",
        "fig, ax = plt.subplots()\n",
        "cm = confusion_matrix(y_test, y_test_predict_model3)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=['No Survived', 'Survived'])\n",
        "disp.plot(ax=ax)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "id": "MApmcvx8gPpc",
        "outputId": "d68c673a-c888-426d-b169-dfc3573fe35c"
      },
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Conclusion"
      ],
      "metadata": {
        "id": "PZxOX71tHNdQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model 1 : XG Boost Classifier Model\n",
        "\n",
        "Training Data Accuracy : 85.533%\n",
        "\n",
        "Testing Data Accuracy : 78.212%"
      ],
      "metadata": {
        "id": "gbexpTxOaqA0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model 2 : XG Boost Classifier Model\n",
        "\n",
        "Training Data Accuracy : 81.601%\n",
        "\n",
        "Testing Data Accuracy : 79.329%"
      ],
      "metadata": {
        "id": "_D0VfhnzHZUA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model 3 : Logistic Regression\n",
        "\n",
        "Training Data Accuracy : 80.617%\n",
        "\n",
        "Testing Data Accuracy : 81.005%"
      ],
      "metadata": {
        "id": "9Gw6t2kVH-8G"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Predictive System"
      ],
      "metadata": {
        "id": "45TxCpyPCEom"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Buliding a Predictive System for here"
      ],
      "metadata": {
        "id": "0hYf6GMvg9ow"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#taking input data\n",
        "input_data = (3,'male',28,0,0,7.8958,'S')\n",
        "\n",
        "#loading columns\n",
        "columns = all_columns\n",
        "\n",
        "# Convert the tuple to a DataFrame\n",
        "df = pd.DataFrame([input_data], columns=columns)\n",
        "\n",
        "# Convert the categorical columns to string type\n",
        "df[cat_cols] = df[cat_cols].astype('str')\n",
        "\n",
        "# Encode the categorical columns\n",
        "input_data_encoded = encoder.transform(df[cat_cols])\n",
        "\n",
        "# Create a DataFrame with the encoded features\n",
        "input_data_encoded_df = pd.DataFrame(input_data_encoded, columns=encoded_columns)\n",
        "\n",
        "# Add the remaining non-categorical columns\n",
        "input_data_final_encoded = pd.concat([df.drop(cat_cols, axis=1).reset_index(drop=True), input_data_encoded_df], axis=1)\n",
        "\n",
        "# Standardize the input data\n",
        "input_data_scaled = scaler.transform(input_data_final_encoded)\n",
        "\n",
        "# Create a DataFrame with the standardized features\n",
        "input_data_df = pd.DataFrame(input_data_scaled, columns=training_columns)\n",
        "\n",
        "#loading best features\n",
        "df_best_features_knn = input_data_df[best_features_knn]\n",
        "df_best_features_xgb = input_data_df[best_features_xgb]\n",
        "df_best_features_lr = input_data_df[best_features_lr]\n",
        "\n",
        "#predictions\n",
        "prediction1 = model1.predict(df_best_features_knn)\n",
        "prediction2 = model2.predict(df_best_features_xgb)\n",
        "prediction3 = model3.predict(df_best_features_lr)\n",
        "\n",
        "# Print the predictions\n",
        "print(prediction1)\n",
        "if(prediction1[0]==0):\n",
        "  print('The Person does not Survived')\n",
        "else:\n",
        "  print('The Person Survived')\n",
        "print(prediction2)\n",
        "if(prediction2[0]==0):\n",
        "  print('The Person does not Survived')\n",
        "else:\n",
        "  print('The Person Survived')\n",
        "print(prediction3)\n",
        "if(prediction3[0]==0):\n",
        "  print('The Person does not Survived')\n",
        "else:\n",
        "  print('The Person Survived')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CzJPJdVB6YZN",
        "outputId": "c27d80c1-36e4-431c-c532-f52b74720258"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0]\n",
            "The Person does not Survived\n",
            "[0]\n",
            "The Person does not Survived\n",
            "[0]\n",
            "The Person does not Survived\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "import pickle\n",
        "with open('columns.pkl', 'wb') as file:\n",
        "    pickle.dump(all_columns, file)\n",
        "with open('cat_columns.pkl', 'wb') as file:\n",
        "    pickle.dump(cat_cols, file)\n",
        "with open('encoder.pkl', 'wb') as f:\n",
        "    pickle.dump(encoder, f)\n",
        "with open('encoded_columns.pkl', 'wb') as file:\n",
        "    pickle.dump(encoded_columns, file)\n",
        "with open('training_columns.pkl', 'wb') as file:\n",
        "    pickle.dump(training_columns, file)\n",
        "with open('scaler.pkl', 'wb') as f:\n",
        "    pickle.dump(scaler, f)\n",
        "with open('best_features_knn.json', 'w') as file:\n",
        "    json.dump(best_features_knn, file)\n",
        "with open('best_features_xgb.json', 'w') as file:\n",
        "    json.dump(best_features_xgb, file)\n",
        "with open('best_features_lr.json', 'w') as file:\n",
        "    json.dump(best_features_lr, file)\n",
        "with open('titanic_survival_trained_knn_model.sav', 'wb') as f:\n",
        "    pickle.dump(model1, f)\n",
        "with open('titanic_survival_trained_xgb_model.sav', 'wb') as f:\n",
        "    pickle.dump(model2, f)\n",
        "with open('titanic_survival_trained_lr_model.sav', 'wb') as f:\n",
        "    pickle.dump(model3, f)"
      ],
      "metadata": {
        "id": "pp4y9aRMwvO2"
      },
      "execution_count": 165,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#loading. the saved model\n",
        "with open('columns.pkl', 'rb') as f:\n",
        "    all_columns_sm = pickle.load(f)\n",
        "with open('cat_columns.pkl', 'rb') as f:\n",
        "    cat_columns_sm = pickle.load(f)\n",
        "with open('encoder.pkl', 'rb') as f:\n",
        "    encoder_sm = pickle.load(f)\n",
        "with open('encoded_columns.pkl', 'rb') as f:\n",
        "    encoded_columns_sm = pickle.load(f)\n",
        "with open('training_columns.pkl', 'rb') as f:\n",
        "    training_columns_sm = pickle.load(f)\n",
        "with open('scaler.pkl', 'rb') as f:\n",
        "    scaler_sm = pickle.load(f)\n",
        "with open('best_features_knn.json', 'r') as file:\n",
        "    best_features_knn = json.load(file)\n",
        "with open('best_features_xgb.json', 'r') as file:\n",
        "    best_features_xgb = json.load(file)\n",
        "with open('best_features_lr.json', 'r') as file:\n",
        "    best_features_lr = json.load(file)\n",
        "with open('titanic_survival_trained_knn_model.sav', 'rb') as f:\n",
        "    loaded_model_knn = pickle.load(f)\n",
        "with open('titanic_survival_trained_xgb_model.sav', 'rb') as f:\n",
        "    loaded_model_xgb = pickle.load(f)\n",
        "with open('titanic_survival_trained_lr_model.sav', 'rb') as f:\n",
        "    loaded_model_lr = pickle.load(f)"
      ],
      "metadata": {
        "id": "t2Q4RkBA1SMg"
      },
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#taking input data\n",
        "input_data = (3,'male',28,0,0,7.8958,'S')\n",
        "\n",
        "#loading columns\n",
        "columns = all_columns_sm\n",
        "\n",
        "# Convert the tuple to a DataFrame\n",
        "df = pd.DataFrame([input_data], columns=columns)\n",
        "\n",
        "# Convert the categorical columns to string type\n",
        "df[cat_columns_sm] = df[cat_columns_sm].astype('str')\n",
        "\n",
        "# Encode the categorical columns\n",
        "input_data_encoded = encoder_sm.transform(df[cat_columns_sm])\n",
        "\n",
        "# Create a DataFrame with the encoded features\n",
        "input_data_encoded_df = pd.DataFrame(input_data_encoded, columns=encoded_columns_sm)\n",
        "\n",
        "# Add the remaining non-categorical columns\n",
        "input_data_final_encoded = pd.concat([df.drop(cat_columns_sm, axis=1).reset_index(drop=True), input_data_encoded_df], axis=1)\n",
        "\n",
        "# Standardize the input data\n",
        "input_data_scaled = scaler_sm.transform(input_data_final_encoded)\n",
        "\n",
        "# Create a DataFrame with the standardized features\n",
        "input_data_df = pd.DataFrame(input_data_scaled, columns=training_columns_sm)\n",
        "\n",
        "#loading best features\n",
        "df_best_features_knn = input_data_df[best_features_knn]\n",
        "df_best_features_xgb = input_data_df[best_features_xgb]\n",
        "df_best_features_lr = input_data_df[best_features_lr]\n",
        "\n",
        "#predictions\n",
        "prediction1 = loaded_model_knn.predict(df_best_features_knn)\n",
        "prediction2 = loaded_model_xgb.predict(df_best_features_xgb)\n",
        "prediction3 = loaded_model_lr.predict(df_best_features_lr)\n",
        "\n",
        "# Print the predictions\n",
        "print(prediction1)\n",
        "if(prediction1[0]==0):\n",
        "  print('The Person does not Survived')\n",
        "else:\n",
        "  print('The Person Survived')\n",
        "print(prediction2)\n",
        "if(prediction2[0]==0):\n",
        "  print('The Person does not Survived')\n",
        "else:\n",
        "  print('The Person Survived')\n",
        "print(prediction3)\n",
        "if(prediction3[0]==0):\n",
        "  print('The Person does not Survived')\n",
        "else:\n",
        "  print('The Person Survived')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e__sZJfd1PVS",
        "outputId": "cf52978d-c842-45c4-b585-c6266bf91a64"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0]\n",
            "The Person does not Survived\n",
            "[0]\n",
            "The Person does not Survived\n",
            "[0]\n",
            "The Person does not Survived\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MMp5azCP3N6P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Dlxfx-8MS7NQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "T6MKvlW0S7KQ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}